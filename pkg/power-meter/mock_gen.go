// Code generated by mocktail; DO NOT EDIT.

package powerMeter

import (
	"context"
	"testing"
	"time"

	"github.com/lorenzodonini/ocpp-go/ocpp1.6/types"
	"github.com/stretchr/testify/mock"
)

// powerMeterMock mock of PowerMeter.
type powerMeterMock struct{ mock.Mock }

// NewPowerMeterMock creates a new powerMeterMock.
func NewPowerMeterMock(tb testing.TB) *powerMeterMock {
	tb.Helper()

	m := &powerMeterMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *powerMeterMock) GetCurrent(phase int) types.SampledValue {
	_ret := _m.Called(phase)

	if _rf, ok := _ret.Get(0).(func(int) types.SampledValue); ok {
		return _rf(phase)
	}

	_ra0, _ := _ret.Get(0).(types.SampledValue)

	return _ra0
}

func (_m *powerMeterMock) OnGetCurrent(phase int) *powerMeterGetCurrentCall {
	return &powerMeterGetCurrentCall{Call: _m.Mock.On("GetCurrent", phase), Parent: _m}
}

func (_m *powerMeterMock) OnGetCurrentRaw(phase interface{}) *powerMeterGetCurrentCall {
	return &powerMeterGetCurrentCall{Call: _m.Mock.On("GetCurrent", phase), Parent: _m}
}

type powerMeterGetCurrentCall struct {
	*mock.Call
	Parent *powerMeterMock
}

func (_c *powerMeterGetCurrentCall) Panic(msg string) *powerMeterGetCurrentCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *powerMeterGetCurrentCall) Once() *powerMeterGetCurrentCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *powerMeterGetCurrentCall) Twice() *powerMeterGetCurrentCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *powerMeterGetCurrentCall) Times(i int) *powerMeterGetCurrentCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *powerMeterGetCurrentCall) WaitUntil(w <-chan time.Time) *powerMeterGetCurrentCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *powerMeterGetCurrentCall) After(d time.Duration) *powerMeterGetCurrentCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *powerMeterGetCurrentCall) Run(fn func(args mock.Arguments)) *powerMeterGetCurrentCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *powerMeterGetCurrentCall) Maybe() *powerMeterGetCurrentCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *powerMeterGetCurrentCall) TypedReturns(a types.SampledValue) *powerMeterGetCurrentCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *powerMeterGetCurrentCall) ReturnsFn(fn func(int) types.SampledValue) *powerMeterGetCurrentCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *powerMeterGetCurrentCall) TypedRun(fn func(int)) *powerMeterGetCurrentCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_phase := args.Int(0)
		fn(_phase)
	})
	return _c
}

func (_c *powerMeterGetCurrentCall) OnGetCurrent(phase int) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrent(phase)
}

func (_c *powerMeterGetCurrentCall) OnGetEnergy() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergy()
}

func (_c *powerMeterGetCurrentCall) OnGetPower() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPower()
}

func (_c *powerMeterGetCurrentCall) OnGetRMSCurrent(phase int) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrent(phase)
}

func (_c *powerMeterGetCurrentCall) OnGetRMSVoltage(phase int) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltage(phase)
}

func (_c *powerMeterGetCurrentCall) OnGetType() *powerMeterGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *powerMeterGetCurrentCall) OnGetVoltage(phase int) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltage(phase)
}

func (_c *powerMeterGetCurrentCall) OnInit() *powerMeterInitCall {
	return _c.Parent.OnInit()
}

func (_c *powerMeterGetCurrentCall) OnReset() *powerMeterResetCall {
	return _c.Parent.OnReset()
}

func (_c *powerMeterGetCurrentCall) OnGetCurrentRaw(phase interface{}) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrentRaw(phase)
}

func (_c *powerMeterGetCurrentCall) OnGetEnergyRaw() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergyRaw()
}

func (_c *powerMeterGetCurrentCall) OnGetPowerRaw() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPowerRaw()
}

func (_c *powerMeterGetCurrentCall) OnGetRMSCurrentRaw(phase interface{}) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrentRaw(phase)
}

func (_c *powerMeterGetCurrentCall) OnGetRMSVoltageRaw(phase interface{}) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltageRaw(phase)
}

func (_c *powerMeterGetCurrentCall) OnGetTypeRaw() *powerMeterGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *powerMeterGetCurrentCall) OnGetVoltageRaw(phase interface{}) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltageRaw(phase)
}

func (_c *powerMeterGetCurrentCall) OnInitRaw() *powerMeterInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *powerMeterGetCurrentCall) OnResetRaw() *powerMeterResetCall {
	return _c.Parent.OnResetRaw()
}

func (_m *powerMeterMock) GetEnergy() types.SampledValue {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() types.SampledValue); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(types.SampledValue)

	return _ra0
}

func (_m *powerMeterMock) OnGetEnergy() *powerMeterGetEnergyCall {
	return &powerMeterGetEnergyCall{Call: _m.Mock.On("GetEnergy"), Parent: _m}
}

func (_m *powerMeterMock) OnGetEnergyRaw() *powerMeterGetEnergyCall {
	return &powerMeterGetEnergyCall{Call: _m.Mock.On("GetEnergy"), Parent: _m}
}

type powerMeterGetEnergyCall struct {
	*mock.Call
	Parent *powerMeterMock
}

func (_c *powerMeterGetEnergyCall) Panic(msg string) *powerMeterGetEnergyCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *powerMeterGetEnergyCall) Once() *powerMeterGetEnergyCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *powerMeterGetEnergyCall) Twice() *powerMeterGetEnergyCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *powerMeterGetEnergyCall) Times(i int) *powerMeterGetEnergyCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *powerMeterGetEnergyCall) WaitUntil(w <-chan time.Time) *powerMeterGetEnergyCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *powerMeterGetEnergyCall) After(d time.Duration) *powerMeterGetEnergyCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *powerMeterGetEnergyCall) Run(fn func(args mock.Arguments)) *powerMeterGetEnergyCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *powerMeterGetEnergyCall) Maybe() *powerMeterGetEnergyCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *powerMeterGetEnergyCall) TypedReturns(a types.SampledValue) *powerMeterGetEnergyCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *powerMeterGetEnergyCall) ReturnsFn(fn func() types.SampledValue) *powerMeterGetEnergyCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *powerMeterGetEnergyCall) TypedRun(fn func()) *powerMeterGetEnergyCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *powerMeterGetEnergyCall) OnGetCurrent(phase int) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrent(phase)
}

func (_c *powerMeterGetEnergyCall) OnGetEnergy() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergy()
}

func (_c *powerMeterGetEnergyCall) OnGetPower() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPower()
}

func (_c *powerMeterGetEnergyCall) OnGetRMSCurrent(phase int) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrent(phase)
}

func (_c *powerMeterGetEnergyCall) OnGetRMSVoltage(phase int) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltage(phase)
}

func (_c *powerMeterGetEnergyCall) OnGetType() *powerMeterGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *powerMeterGetEnergyCall) OnGetVoltage(phase int) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltage(phase)
}

func (_c *powerMeterGetEnergyCall) OnInit() *powerMeterInitCall {
	return _c.Parent.OnInit()
}

func (_c *powerMeterGetEnergyCall) OnReset() *powerMeterResetCall {
	return _c.Parent.OnReset()
}

func (_c *powerMeterGetEnergyCall) OnGetCurrentRaw(phase interface{}) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrentRaw(phase)
}

func (_c *powerMeterGetEnergyCall) OnGetEnergyRaw() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergyRaw()
}

func (_c *powerMeterGetEnergyCall) OnGetPowerRaw() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPowerRaw()
}

func (_c *powerMeterGetEnergyCall) OnGetRMSCurrentRaw(phase interface{}) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrentRaw(phase)
}

func (_c *powerMeterGetEnergyCall) OnGetRMSVoltageRaw(phase interface{}) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltageRaw(phase)
}

func (_c *powerMeterGetEnergyCall) OnGetTypeRaw() *powerMeterGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *powerMeterGetEnergyCall) OnGetVoltageRaw(phase interface{}) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltageRaw(phase)
}

func (_c *powerMeterGetEnergyCall) OnInitRaw() *powerMeterInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *powerMeterGetEnergyCall) OnResetRaw() *powerMeterResetCall {
	return _c.Parent.OnResetRaw()
}

func (_m *powerMeterMock) GetPower() types.SampledValue {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() types.SampledValue); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(types.SampledValue)

	return _ra0
}

func (_m *powerMeterMock) OnGetPower() *powerMeterGetPowerCall {
	return &powerMeterGetPowerCall{Call: _m.Mock.On("GetPower"), Parent: _m}
}

func (_m *powerMeterMock) OnGetPowerRaw() *powerMeterGetPowerCall {
	return &powerMeterGetPowerCall{Call: _m.Mock.On("GetPower"), Parent: _m}
}

type powerMeterGetPowerCall struct {
	*mock.Call
	Parent *powerMeterMock
}

func (_c *powerMeterGetPowerCall) Panic(msg string) *powerMeterGetPowerCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *powerMeterGetPowerCall) Once() *powerMeterGetPowerCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *powerMeterGetPowerCall) Twice() *powerMeterGetPowerCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *powerMeterGetPowerCall) Times(i int) *powerMeterGetPowerCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *powerMeterGetPowerCall) WaitUntil(w <-chan time.Time) *powerMeterGetPowerCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *powerMeterGetPowerCall) After(d time.Duration) *powerMeterGetPowerCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *powerMeterGetPowerCall) Run(fn func(args mock.Arguments)) *powerMeterGetPowerCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *powerMeterGetPowerCall) Maybe() *powerMeterGetPowerCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *powerMeterGetPowerCall) TypedReturns(a types.SampledValue) *powerMeterGetPowerCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *powerMeterGetPowerCall) ReturnsFn(fn func() types.SampledValue) *powerMeterGetPowerCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *powerMeterGetPowerCall) TypedRun(fn func()) *powerMeterGetPowerCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *powerMeterGetPowerCall) OnGetCurrent(phase int) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrent(phase)
}

func (_c *powerMeterGetPowerCall) OnGetEnergy() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergy()
}

func (_c *powerMeterGetPowerCall) OnGetPower() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPower()
}

func (_c *powerMeterGetPowerCall) OnGetRMSCurrent(phase int) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrent(phase)
}

func (_c *powerMeterGetPowerCall) OnGetRMSVoltage(phase int) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltage(phase)
}

func (_c *powerMeterGetPowerCall) OnGetType() *powerMeterGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *powerMeterGetPowerCall) OnGetVoltage(phase int) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltage(phase)
}

func (_c *powerMeterGetPowerCall) OnInit() *powerMeterInitCall {
	return _c.Parent.OnInit()
}

func (_c *powerMeterGetPowerCall) OnReset() *powerMeterResetCall {
	return _c.Parent.OnReset()
}

func (_c *powerMeterGetPowerCall) OnGetCurrentRaw(phase interface{}) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrentRaw(phase)
}

func (_c *powerMeterGetPowerCall) OnGetEnergyRaw() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergyRaw()
}

func (_c *powerMeterGetPowerCall) OnGetPowerRaw() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPowerRaw()
}

func (_c *powerMeterGetPowerCall) OnGetRMSCurrentRaw(phase interface{}) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrentRaw(phase)
}

func (_c *powerMeterGetPowerCall) OnGetRMSVoltageRaw(phase interface{}) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltageRaw(phase)
}

func (_c *powerMeterGetPowerCall) OnGetTypeRaw() *powerMeterGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *powerMeterGetPowerCall) OnGetVoltageRaw(phase interface{}) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltageRaw(phase)
}

func (_c *powerMeterGetPowerCall) OnInitRaw() *powerMeterInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *powerMeterGetPowerCall) OnResetRaw() *powerMeterResetCall {
	return _c.Parent.OnResetRaw()
}

func (_m *powerMeterMock) GetRMSCurrent(phase int) types.SampledValue {
	_ret := _m.Called(phase)

	if _rf, ok := _ret.Get(0).(func(int) types.SampledValue); ok {
		return _rf(phase)
	}

	_ra0, _ := _ret.Get(0).(types.SampledValue)

	return _ra0
}

func (_m *powerMeterMock) OnGetRMSCurrent(phase int) *powerMeterGetRMSCurrentCall {
	return &powerMeterGetRMSCurrentCall{Call: _m.Mock.On("GetRMSCurrent", phase), Parent: _m}
}

func (_m *powerMeterMock) OnGetRMSCurrentRaw(phase interface{}) *powerMeterGetRMSCurrentCall {
	return &powerMeterGetRMSCurrentCall{Call: _m.Mock.On("GetRMSCurrent", phase), Parent: _m}
}

type powerMeterGetRMSCurrentCall struct {
	*mock.Call
	Parent *powerMeterMock
}

func (_c *powerMeterGetRMSCurrentCall) Panic(msg string) *powerMeterGetRMSCurrentCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *powerMeterGetRMSCurrentCall) Once() *powerMeterGetRMSCurrentCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *powerMeterGetRMSCurrentCall) Twice() *powerMeterGetRMSCurrentCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *powerMeterGetRMSCurrentCall) Times(i int) *powerMeterGetRMSCurrentCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *powerMeterGetRMSCurrentCall) WaitUntil(w <-chan time.Time) *powerMeterGetRMSCurrentCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *powerMeterGetRMSCurrentCall) After(d time.Duration) *powerMeterGetRMSCurrentCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *powerMeterGetRMSCurrentCall) Run(fn func(args mock.Arguments)) *powerMeterGetRMSCurrentCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *powerMeterGetRMSCurrentCall) Maybe() *powerMeterGetRMSCurrentCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *powerMeterGetRMSCurrentCall) TypedReturns(a types.SampledValue) *powerMeterGetRMSCurrentCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *powerMeterGetRMSCurrentCall) ReturnsFn(fn func(int) types.SampledValue) *powerMeterGetRMSCurrentCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *powerMeterGetRMSCurrentCall) TypedRun(fn func(int)) *powerMeterGetRMSCurrentCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_phase := args.Int(0)
		fn(_phase)
	})
	return _c
}

func (_c *powerMeterGetRMSCurrentCall) OnGetCurrent(phase int) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrent(phase)
}

func (_c *powerMeterGetRMSCurrentCall) OnGetEnergy() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergy()
}

func (_c *powerMeterGetRMSCurrentCall) OnGetPower() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPower()
}

func (_c *powerMeterGetRMSCurrentCall) OnGetRMSCurrent(phase int) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrent(phase)
}

func (_c *powerMeterGetRMSCurrentCall) OnGetRMSVoltage(phase int) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltage(phase)
}

func (_c *powerMeterGetRMSCurrentCall) OnGetType() *powerMeterGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *powerMeterGetRMSCurrentCall) OnGetVoltage(phase int) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltage(phase)
}

func (_c *powerMeterGetRMSCurrentCall) OnInit() *powerMeterInitCall {
	return _c.Parent.OnInit()
}

func (_c *powerMeterGetRMSCurrentCall) OnReset() *powerMeterResetCall {
	return _c.Parent.OnReset()
}

func (_c *powerMeterGetRMSCurrentCall) OnGetCurrentRaw(phase interface{}) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrentRaw(phase)
}

func (_c *powerMeterGetRMSCurrentCall) OnGetEnergyRaw() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergyRaw()
}

func (_c *powerMeterGetRMSCurrentCall) OnGetPowerRaw() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPowerRaw()
}

func (_c *powerMeterGetRMSCurrentCall) OnGetRMSCurrentRaw(phase interface{}) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrentRaw(phase)
}

func (_c *powerMeterGetRMSCurrentCall) OnGetRMSVoltageRaw(phase interface{}) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltageRaw(phase)
}

func (_c *powerMeterGetRMSCurrentCall) OnGetTypeRaw() *powerMeterGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *powerMeterGetRMSCurrentCall) OnGetVoltageRaw(phase interface{}) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltageRaw(phase)
}

func (_c *powerMeterGetRMSCurrentCall) OnInitRaw() *powerMeterInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *powerMeterGetRMSCurrentCall) OnResetRaw() *powerMeterResetCall {
	return _c.Parent.OnResetRaw()
}

func (_m *powerMeterMock) GetRMSVoltage(phase int) types.SampledValue {
	_ret := _m.Called(phase)

	if _rf, ok := _ret.Get(0).(func(int) types.SampledValue); ok {
		return _rf(phase)
	}

	_ra0, _ := _ret.Get(0).(types.SampledValue)

	return _ra0
}

func (_m *powerMeterMock) OnGetRMSVoltage(phase int) *powerMeterGetRMSVoltageCall {
	return &powerMeterGetRMSVoltageCall{Call: _m.Mock.On("GetRMSVoltage", phase), Parent: _m}
}

func (_m *powerMeterMock) OnGetRMSVoltageRaw(phase interface{}) *powerMeterGetRMSVoltageCall {
	return &powerMeterGetRMSVoltageCall{Call: _m.Mock.On("GetRMSVoltage", phase), Parent: _m}
}

type powerMeterGetRMSVoltageCall struct {
	*mock.Call
	Parent *powerMeterMock
}

func (_c *powerMeterGetRMSVoltageCall) Panic(msg string) *powerMeterGetRMSVoltageCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *powerMeterGetRMSVoltageCall) Once() *powerMeterGetRMSVoltageCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *powerMeterGetRMSVoltageCall) Twice() *powerMeterGetRMSVoltageCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *powerMeterGetRMSVoltageCall) Times(i int) *powerMeterGetRMSVoltageCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *powerMeterGetRMSVoltageCall) WaitUntil(w <-chan time.Time) *powerMeterGetRMSVoltageCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *powerMeterGetRMSVoltageCall) After(d time.Duration) *powerMeterGetRMSVoltageCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *powerMeterGetRMSVoltageCall) Run(fn func(args mock.Arguments)) *powerMeterGetRMSVoltageCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *powerMeterGetRMSVoltageCall) Maybe() *powerMeterGetRMSVoltageCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *powerMeterGetRMSVoltageCall) TypedReturns(a types.SampledValue) *powerMeterGetRMSVoltageCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *powerMeterGetRMSVoltageCall) ReturnsFn(fn func(int) types.SampledValue) *powerMeterGetRMSVoltageCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *powerMeterGetRMSVoltageCall) TypedRun(fn func(int)) *powerMeterGetRMSVoltageCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_phase := args.Int(0)
		fn(_phase)
	})
	return _c
}

func (_c *powerMeterGetRMSVoltageCall) OnGetCurrent(phase int) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrent(phase)
}

func (_c *powerMeterGetRMSVoltageCall) OnGetEnergy() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergy()
}

func (_c *powerMeterGetRMSVoltageCall) OnGetPower() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPower()
}

func (_c *powerMeterGetRMSVoltageCall) OnGetRMSCurrent(phase int) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrent(phase)
}

func (_c *powerMeterGetRMSVoltageCall) OnGetRMSVoltage(phase int) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltage(phase)
}

func (_c *powerMeterGetRMSVoltageCall) OnGetType() *powerMeterGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *powerMeterGetRMSVoltageCall) OnGetVoltage(phase int) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltage(phase)
}

func (_c *powerMeterGetRMSVoltageCall) OnInit() *powerMeterInitCall {
	return _c.Parent.OnInit()
}

func (_c *powerMeterGetRMSVoltageCall) OnReset() *powerMeterResetCall {
	return _c.Parent.OnReset()
}

func (_c *powerMeterGetRMSVoltageCall) OnGetCurrentRaw(phase interface{}) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrentRaw(phase)
}

func (_c *powerMeterGetRMSVoltageCall) OnGetEnergyRaw() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergyRaw()
}

func (_c *powerMeterGetRMSVoltageCall) OnGetPowerRaw() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPowerRaw()
}

func (_c *powerMeterGetRMSVoltageCall) OnGetRMSCurrentRaw(phase interface{}) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrentRaw(phase)
}

func (_c *powerMeterGetRMSVoltageCall) OnGetRMSVoltageRaw(phase interface{}) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltageRaw(phase)
}

func (_c *powerMeterGetRMSVoltageCall) OnGetTypeRaw() *powerMeterGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *powerMeterGetRMSVoltageCall) OnGetVoltageRaw(phase interface{}) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltageRaw(phase)
}

func (_c *powerMeterGetRMSVoltageCall) OnInitRaw() *powerMeterInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *powerMeterGetRMSVoltageCall) OnResetRaw() *powerMeterResetCall {
	return _c.Parent.OnResetRaw()
}

func (_m *powerMeterMock) GetType() string {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() string); ok {
		return _rf()
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *powerMeterMock) OnGetType() *powerMeterGetTypeCall {
	return &powerMeterGetTypeCall{Call: _m.Mock.On("GetType"), Parent: _m}
}

func (_m *powerMeterMock) OnGetTypeRaw() *powerMeterGetTypeCall {
	return &powerMeterGetTypeCall{Call: _m.Mock.On("GetType"), Parent: _m}
}

type powerMeterGetTypeCall struct {
	*mock.Call
	Parent *powerMeterMock
}

func (_c *powerMeterGetTypeCall) Panic(msg string) *powerMeterGetTypeCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *powerMeterGetTypeCall) Once() *powerMeterGetTypeCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *powerMeterGetTypeCall) Twice() *powerMeterGetTypeCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *powerMeterGetTypeCall) Times(i int) *powerMeterGetTypeCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *powerMeterGetTypeCall) WaitUntil(w <-chan time.Time) *powerMeterGetTypeCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *powerMeterGetTypeCall) After(d time.Duration) *powerMeterGetTypeCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *powerMeterGetTypeCall) Run(fn func(args mock.Arguments)) *powerMeterGetTypeCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *powerMeterGetTypeCall) Maybe() *powerMeterGetTypeCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *powerMeterGetTypeCall) TypedReturns(a string) *powerMeterGetTypeCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *powerMeterGetTypeCall) ReturnsFn(fn func() string) *powerMeterGetTypeCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *powerMeterGetTypeCall) TypedRun(fn func()) *powerMeterGetTypeCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *powerMeterGetTypeCall) OnGetCurrent(phase int) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrent(phase)
}

func (_c *powerMeterGetTypeCall) OnGetEnergy() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergy()
}

func (_c *powerMeterGetTypeCall) OnGetPower() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPower()
}

func (_c *powerMeterGetTypeCall) OnGetRMSCurrent(phase int) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrent(phase)
}

func (_c *powerMeterGetTypeCall) OnGetRMSVoltage(phase int) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltage(phase)
}

func (_c *powerMeterGetTypeCall) OnGetType() *powerMeterGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *powerMeterGetTypeCall) OnGetVoltage(phase int) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltage(phase)
}

func (_c *powerMeterGetTypeCall) OnInit() *powerMeterInitCall {
	return _c.Parent.OnInit()
}

func (_c *powerMeterGetTypeCall) OnReset() *powerMeterResetCall {
	return _c.Parent.OnReset()
}

func (_c *powerMeterGetTypeCall) OnGetCurrentRaw(phase interface{}) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrentRaw(phase)
}

func (_c *powerMeterGetTypeCall) OnGetEnergyRaw() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergyRaw()
}

func (_c *powerMeterGetTypeCall) OnGetPowerRaw() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPowerRaw()
}

func (_c *powerMeterGetTypeCall) OnGetRMSCurrentRaw(phase interface{}) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrentRaw(phase)
}

func (_c *powerMeterGetTypeCall) OnGetRMSVoltageRaw(phase interface{}) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltageRaw(phase)
}

func (_c *powerMeterGetTypeCall) OnGetTypeRaw() *powerMeterGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *powerMeterGetTypeCall) OnGetVoltageRaw(phase interface{}) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltageRaw(phase)
}

func (_c *powerMeterGetTypeCall) OnInitRaw() *powerMeterInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *powerMeterGetTypeCall) OnResetRaw() *powerMeterResetCall {
	return _c.Parent.OnResetRaw()
}

func (_m *powerMeterMock) GetVoltage(phase int) types.SampledValue {
	_ret := _m.Called(phase)

	if _rf, ok := _ret.Get(0).(func(int) types.SampledValue); ok {
		return _rf(phase)
	}

	_ra0, _ := _ret.Get(0).(types.SampledValue)

	return _ra0
}

func (_m *powerMeterMock) OnGetVoltage(phase int) *powerMeterGetVoltageCall {
	return &powerMeterGetVoltageCall{Call: _m.Mock.On("GetVoltage", phase), Parent: _m}
}

func (_m *powerMeterMock) OnGetVoltageRaw(phase interface{}) *powerMeterGetVoltageCall {
	return &powerMeterGetVoltageCall{Call: _m.Mock.On("GetVoltage", phase), Parent: _m}
}

type powerMeterGetVoltageCall struct {
	*mock.Call
	Parent *powerMeterMock
}

func (_c *powerMeterGetVoltageCall) Panic(msg string) *powerMeterGetVoltageCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *powerMeterGetVoltageCall) Once() *powerMeterGetVoltageCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *powerMeterGetVoltageCall) Twice() *powerMeterGetVoltageCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *powerMeterGetVoltageCall) Times(i int) *powerMeterGetVoltageCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *powerMeterGetVoltageCall) WaitUntil(w <-chan time.Time) *powerMeterGetVoltageCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *powerMeterGetVoltageCall) After(d time.Duration) *powerMeterGetVoltageCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *powerMeterGetVoltageCall) Run(fn func(args mock.Arguments)) *powerMeterGetVoltageCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *powerMeterGetVoltageCall) Maybe() *powerMeterGetVoltageCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *powerMeterGetVoltageCall) TypedReturns(a types.SampledValue) *powerMeterGetVoltageCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *powerMeterGetVoltageCall) ReturnsFn(fn func(int) types.SampledValue) *powerMeterGetVoltageCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *powerMeterGetVoltageCall) TypedRun(fn func(int)) *powerMeterGetVoltageCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_phase := args.Int(0)
		fn(_phase)
	})
	return _c
}

func (_c *powerMeterGetVoltageCall) OnGetCurrent(phase int) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrent(phase)
}

func (_c *powerMeterGetVoltageCall) OnGetEnergy() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergy()
}

func (_c *powerMeterGetVoltageCall) OnGetPower() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPower()
}

func (_c *powerMeterGetVoltageCall) OnGetRMSCurrent(phase int) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrent(phase)
}

func (_c *powerMeterGetVoltageCall) OnGetRMSVoltage(phase int) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltage(phase)
}

func (_c *powerMeterGetVoltageCall) OnGetType() *powerMeterGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *powerMeterGetVoltageCall) OnGetVoltage(phase int) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltage(phase)
}

func (_c *powerMeterGetVoltageCall) OnInit() *powerMeterInitCall {
	return _c.Parent.OnInit()
}

func (_c *powerMeterGetVoltageCall) OnReset() *powerMeterResetCall {
	return _c.Parent.OnReset()
}

func (_c *powerMeterGetVoltageCall) OnGetCurrentRaw(phase interface{}) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrentRaw(phase)
}

func (_c *powerMeterGetVoltageCall) OnGetEnergyRaw() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergyRaw()
}

func (_c *powerMeterGetVoltageCall) OnGetPowerRaw() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPowerRaw()
}

func (_c *powerMeterGetVoltageCall) OnGetRMSCurrentRaw(phase interface{}) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrentRaw(phase)
}

func (_c *powerMeterGetVoltageCall) OnGetRMSVoltageRaw(phase interface{}) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltageRaw(phase)
}

func (_c *powerMeterGetVoltageCall) OnGetTypeRaw() *powerMeterGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *powerMeterGetVoltageCall) OnGetVoltageRaw(phase interface{}) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltageRaw(phase)
}

func (_c *powerMeterGetVoltageCall) OnInitRaw() *powerMeterInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *powerMeterGetVoltageCall) OnResetRaw() *powerMeterResetCall {
	return _c.Parent.OnResetRaw()
}

func (_m *powerMeterMock) Init(_ context.Context) error {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() error); ok {
		return _rf()
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *powerMeterMock) OnInit() *powerMeterInitCall {
	return &powerMeterInitCall{Call: _m.Mock.On("Init"), Parent: _m}
}

func (_m *powerMeterMock) OnInitRaw() *powerMeterInitCall {
	return &powerMeterInitCall{Call: _m.Mock.On("Init"), Parent: _m}
}

type powerMeterInitCall struct {
	*mock.Call
	Parent *powerMeterMock
}

func (_c *powerMeterInitCall) Panic(msg string) *powerMeterInitCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *powerMeterInitCall) Once() *powerMeterInitCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *powerMeterInitCall) Twice() *powerMeterInitCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *powerMeterInitCall) Times(i int) *powerMeterInitCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *powerMeterInitCall) WaitUntil(w <-chan time.Time) *powerMeterInitCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *powerMeterInitCall) After(d time.Duration) *powerMeterInitCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *powerMeterInitCall) Run(fn func(args mock.Arguments)) *powerMeterInitCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *powerMeterInitCall) Maybe() *powerMeterInitCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *powerMeterInitCall) TypedReturns(a error) *powerMeterInitCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *powerMeterInitCall) ReturnsFn(fn func() error) *powerMeterInitCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *powerMeterInitCall) TypedRun(fn func()) *powerMeterInitCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *powerMeterInitCall) OnGetCurrent(phase int) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrent(phase)
}

func (_c *powerMeterInitCall) OnGetEnergy() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergy()
}

func (_c *powerMeterInitCall) OnGetPower() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPower()
}

func (_c *powerMeterInitCall) OnGetRMSCurrent(phase int) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrent(phase)
}

func (_c *powerMeterInitCall) OnGetRMSVoltage(phase int) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltage(phase)
}

func (_c *powerMeterInitCall) OnGetType() *powerMeterGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *powerMeterInitCall) OnGetVoltage(phase int) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltage(phase)
}

func (_c *powerMeterInitCall) OnInit() *powerMeterInitCall {
	return _c.Parent.OnInit()
}

func (_c *powerMeterInitCall) OnReset() *powerMeterResetCall {
	return _c.Parent.OnReset()
}

func (_c *powerMeterInitCall) OnGetCurrentRaw(phase interface{}) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrentRaw(phase)
}

func (_c *powerMeterInitCall) OnGetEnergyRaw() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergyRaw()
}

func (_c *powerMeterInitCall) OnGetPowerRaw() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPowerRaw()
}

func (_c *powerMeterInitCall) OnGetRMSCurrentRaw(phase interface{}) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrentRaw(phase)
}

func (_c *powerMeterInitCall) OnGetRMSVoltageRaw(phase interface{}) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltageRaw(phase)
}

func (_c *powerMeterInitCall) OnGetTypeRaw() *powerMeterGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *powerMeterInitCall) OnGetVoltageRaw(phase interface{}) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltageRaw(phase)
}

func (_c *powerMeterInitCall) OnInitRaw() *powerMeterInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *powerMeterInitCall) OnResetRaw() *powerMeterResetCall {
	return _c.Parent.OnResetRaw()
}

func (_m *powerMeterMock) Reset() {
	_m.Called()
}

func (_m *powerMeterMock) OnReset() *powerMeterResetCall {
	return &powerMeterResetCall{Call: _m.Mock.On("Reset"), Parent: _m}
}

func (_m *powerMeterMock) OnResetRaw() *powerMeterResetCall {
	return &powerMeterResetCall{Call: _m.Mock.On("Reset"), Parent: _m}
}

type powerMeterResetCall struct {
	*mock.Call
	Parent *powerMeterMock
}

func (_c *powerMeterResetCall) Panic(msg string) *powerMeterResetCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *powerMeterResetCall) Once() *powerMeterResetCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *powerMeterResetCall) Twice() *powerMeterResetCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *powerMeterResetCall) Times(i int) *powerMeterResetCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *powerMeterResetCall) WaitUntil(w <-chan time.Time) *powerMeterResetCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *powerMeterResetCall) After(d time.Duration) *powerMeterResetCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *powerMeterResetCall) Run(fn func(args mock.Arguments)) *powerMeterResetCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *powerMeterResetCall) Maybe() *powerMeterResetCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *powerMeterResetCall) TypedRun(fn func()) *powerMeterResetCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *powerMeterResetCall) OnGetCurrent(phase int) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrent(phase)
}

func (_c *powerMeterResetCall) OnGetEnergy() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergy()
}

func (_c *powerMeterResetCall) OnGetPower() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPower()
}

func (_c *powerMeterResetCall) OnGetRMSCurrent(phase int) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrent(phase)
}

func (_c *powerMeterResetCall) OnGetRMSVoltage(phase int) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltage(phase)
}

func (_c *powerMeterResetCall) OnGetType() *powerMeterGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *powerMeterResetCall) OnGetVoltage(phase int) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltage(phase)
}

func (_c *powerMeterResetCall) OnInit() *powerMeterInitCall {
	return _c.Parent.OnInit()
}

func (_c *powerMeterResetCall) OnReset() *powerMeterResetCall {
	return _c.Parent.OnReset()
}

func (_c *powerMeterResetCall) OnGetCurrentRaw(phase interface{}) *powerMeterGetCurrentCall {
	return _c.Parent.OnGetCurrentRaw(phase)
}

func (_c *powerMeterResetCall) OnGetEnergyRaw() *powerMeterGetEnergyCall {
	return _c.Parent.OnGetEnergyRaw()
}

func (_c *powerMeterResetCall) OnGetPowerRaw() *powerMeterGetPowerCall {
	return _c.Parent.OnGetPowerRaw()
}

func (_c *powerMeterResetCall) OnGetRMSCurrentRaw(phase interface{}) *powerMeterGetRMSCurrentCall {
	return _c.Parent.OnGetRMSCurrentRaw(phase)
}

func (_c *powerMeterResetCall) OnGetRMSVoltageRaw(phase interface{}) *powerMeterGetRMSVoltageCall {
	return _c.Parent.OnGetRMSVoltageRaw(phase)
}

func (_c *powerMeterResetCall) OnGetTypeRaw() *powerMeterGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *powerMeterResetCall) OnGetVoltageRaw(phase interface{}) *powerMeterGetVoltageCall {
	return _c.Parent.OnGetVoltageRaw(phase)
}

func (_c *powerMeterResetCall) OnInitRaw() *powerMeterInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *powerMeterResetCall) OnResetRaw() *powerMeterResetCall {
	return _c.Parent.OnResetRaw()
}
