// Code generated by mocktail; DO NOT EDIT.

package evcc

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// evccMock mock of EVCC.
type evccMock struct{ mock.Mock }

// NewEvccMock creates a new evccMock.
func NewEvccMock(tb testing.TB) *evccMock {
	tb.Helper()

	m := &evccMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *evccMock) Cleanup() error {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() error); ok {
		return _rf()
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *evccMock) OnCleanup() *evccCleanupCall {
	return &evccCleanupCall{Call: _m.Mock.On("Cleanup"), Parent: _m}
}

func (_m *evccMock) OnCleanupRaw() *evccCleanupCall {
	return &evccCleanupCall{Call: _m.Mock.On("Cleanup"), Parent: _m}
}

type evccCleanupCall struct {
	*mock.Call
	Parent *evccMock
}

func (_c *evccCleanupCall) Panic(msg string) *evccCleanupCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *evccCleanupCall) Once() *evccCleanupCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *evccCleanupCall) Twice() *evccCleanupCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *evccCleanupCall) Times(i int) *evccCleanupCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *evccCleanupCall) WaitUntil(w <-chan time.Time) *evccCleanupCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *evccCleanupCall) After(d time.Duration) *evccCleanupCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *evccCleanupCall) Run(fn func(args mock.Arguments)) *evccCleanupCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *evccCleanupCall) Maybe() *evccCleanupCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *evccCleanupCall) TypedReturns(a error) *evccCleanupCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *evccCleanupCall) ReturnsFn(fn func() error) *evccCleanupCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *evccCleanupCall) TypedRun(fn func()) *evccCleanupCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *evccCleanupCall) OnCleanup() *evccCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *evccCleanupCall) OnDisableCharging() *evccDisableChargingCall {
	return _c.Parent.OnDisableCharging()
}

func (_c *evccCleanupCall) OnEnableCharging() *evccEnableChargingCall {
	return _c.Parent.OnEnableCharging()
}

func (_c *evccCleanupCall) OnGetError() *evccGetErrorCall {
	return _c.Parent.OnGetError()
}

func (_c *evccCleanupCall) OnGetMaxChargingCurrent() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrent()
}

func (_c *evccCleanupCall) OnGetState() *evccGetStateCall {
	return _c.Parent.OnGetState()
}

func (_c *evccCleanupCall) OnGetStatusChangeChannel() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannel()
}

func (_c *evccCleanupCall) OnGetType() *evccGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *evccCleanupCall) OnInit() *evccInitCall {
	return _c.Parent.OnInit()
}

func (_c *evccCleanupCall) OnLock() *evccLockCall {
	return _c.Parent.OnLock()
}

func (_c *evccCleanupCall) OnReset() *evccResetCall {
	return _c.Parent.OnReset()
}

func (_c *evccCleanupCall) OnSetMaxChargingCurrent(value float64) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrent(value)
}

func (_c *evccCleanupCall) OnUnlock() *evccUnlockCall {
	return _c.Parent.OnUnlock()
}

func (_c *evccCleanupCall) OnCleanupRaw() *evccCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *evccCleanupCall) OnDisableChargingRaw() *evccDisableChargingCall {
	return _c.Parent.OnDisableChargingRaw()
}

func (_c *evccCleanupCall) OnEnableChargingRaw() *evccEnableChargingCall {
	return _c.Parent.OnEnableChargingRaw()
}

func (_c *evccCleanupCall) OnGetErrorRaw() *evccGetErrorCall {
	return _c.Parent.OnGetErrorRaw()
}

func (_c *evccCleanupCall) OnGetMaxChargingCurrentRaw() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrentRaw()
}

func (_c *evccCleanupCall) OnGetStateRaw() *evccGetStateCall {
	return _c.Parent.OnGetStateRaw()
}

func (_c *evccCleanupCall) OnGetStatusChangeChannelRaw() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannelRaw()
}

func (_c *evccCleanupCall) OnGetTypeRaw() *evccGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *evccCleanupCall) OnInitRaw() *evccInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *evccCleanupCall) OnLockRaw() *evccLockCall {
	return _c.Parent.OnLockRaw()
}

func (_c *evccCleanupCall) OnResetRaw() *evccResetCall {
	return _c.Parent.OnResetRaw()
}

func (_c *evccCleanupCall) OnSetMaxChargingCurrentRaw(value interface{}) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrentRaw(value)
}

func (_c *evccCleanupCall) OnUnlockRaw() *evccUnlockCall {
	return _c.Parent.OnUnlockRaw()
}

func (_m *evccMock) DisableCharging() {
	_m.Called()
}

func (_m *evccMock) OnDisableCharging() *evccDisableChargingCall {
	return &evccDisableChargingCall{Call: _m.Mock.On("DisableCharging"), Parent: _m}
}

func (_m *evccMock) OnDisableChargingRaw() *evccDisableChargingCall {
	return &evccDisableChargingCall{Call: _m.Mock.On("DisableCharging"), Parent: _m}
}

type evccDisableChargingCall struct {
	*mock.Call
	Parent *evccMock
}

func (_c *evccDisableChargingCall) Panic(msg string) *evccDisableChargingCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *evccDisableChargingCall) Once() *evccDisableChargingCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *evccDisableChargingCall) Twice() *evccDisableChargingCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *evccDisableChargingCall) Times(i int) *evccDisableChargingCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *evccDisableChargingCall) WaitUntil(w <-chan time.Time) *evccDisableChargingCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *evccDisableChargingCall) After(d time.Duration) *evccDisableChargingCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *evccDisableChargingCall) Run(fn func(args mock.Arguments)) *evccDisableChargingCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *evccDisableChargingCall) Maybe() *evccDisableChargingCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *evccDisableChargingCall) TypedRun(fn func()) *evccDisableChargingCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *evccDisableChargingCall) OnCleanup() *evccCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *evccDisableChargingCall) OnDisableCharging() *evccDisableChargingCall {
	return _c.Parent.OnDisableCharging()
}

func (_c *evccDisableChargingCall) OnEnableCharging() *evccEnableChargingCall {
	return _c.Parent.OnEnableCharging()
}

func (_c *evccDisableChargingCall) OnGetError() *evccGetErrorCall {
	return _c.Parent.OnGetError()
}

func (_c *evccDisableChargingCall) OnGetMaxChargingCurrent() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrent()
}

func (_c *evccDisableChargingCall) OnGetState() *evccGetStateCall {
	return _c.Parent.OnGetState()
}

func (_c *evccDisableChargingCall) OnGetStatusChangeChannel() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannel()
}

func (_c *evccDisableChargingCall) OnGetType() *evccGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *evccDisableChargingCall) OnInit() *evccInitCall {
	return _c.Parent.OnInit()
}

func (_c *evccDisableChargingCall) OnLock() *evccLockCall {
	return _c.Parent.OnLock()
}

func (_c *evccDisableChargingCall) OnReset() *evccResetCall {
	return _c.Parent.OnReset()
}

func (_c *evccDisableChargingCall) OnSetMaxChargingCurrent(value float64) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrent(value)
}

func (_c *evccDisableChargingCall) OnUnlock() *evccUnlockCall {
	return _c.Parent.OnUnlock()
}

func (_c *evccDisableChargingCall) OnCleanupRaw() *evccCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *evccDisableChargingCall) OnDisableChargingRaw() *evccDisableChargingCall {
	return _c.Parent.OnDisableChargingRaw()
}

func (_c *evccDisableChargingCall) OnEnableChargingRaw() *evccEnableChargingCall {
	return _c.Parent.OnEnableChargingRaw()
}

func (_c *evccDisableChargingCall) OnGetErrorRaw() *evccGetErrorCall {
	return _c.Parent.OnGetErrorRaw()
}

func (_c *evccDisableChargingCall) OnGetMaxChargingCurrentRaw() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrentRaw()
}

func (_c *evccDisableChargingCall) OnGetStateRaw() *evccGetStateCall {
	return _c.Parent.OnGetStateRaw()
}

func (_c *evccDisableChargingCall) OnGetStatusChangeChannelRaw() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannelRaw()
}

func (_c *evccDisableChargingCall) OnGetTypeRaw() *evccGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *evccDisableChargingCall) OnInitRaw() *evccInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *evccDisableChargingCall) OnLockRaw() *evccLockCall {
	return _c.Parent.OnLockRaw()
}

func (_c *evccDisableChargingCall) OnResetRaw() *evccResetCall {
	return _c.Parent.OnResetRaw()
}

func (_c *evccDisableChargingCall) OnSetMaxChargingCurrentRaw(value interface{}) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrentRaw(value)
}

func (_c *evccDisableChargingCall) OnUnlockRaw() *evccUnlockCall {
	return _c.Parent.OnUnlockRaw()
}

func (_m *evccMock) EnableCharging() error {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() error); ok {
		return _rf()
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *evccMock) OnEnableCharging() *evccEnableChargingCall {
	return &evccEnableChargingCall{Call: _m.Mock.On("EnableCharging"), Parent: _m}
}

func (_m *evccMock) OnEnableChargingRaw() *evccEnableChargingCall {
	return &evccEnableChargingCall{Call: _m.Mock.On("EnableCharging"), Parent: _m}
}

type evccEnableChargingCall struct {
	*mock.Call
	Parent *evccMock
}

func (_c *evccEnableChargingCall) Panic(msg string) *evccEnableChargingCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *evccEnableChargingCall) Once() *evccEnableChargingCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *evccEnableChargingCall) Twice() *evccEnableChargingCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *evccEnableChargingCall) Times(i int) *evccEnableChargingCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *evccEnableChargingCall) WaitUntil(w <-chan time.Time) *evccEnableChargingCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *evccEnableChargingCall) After(d time.Duration) *evccEnableChargingCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *evccEnableChargingCall) Run(fn func(args mock.Arguments)) *evccEnableChargingCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *evccEnableChargingCall) Maybe() *evccEnableChargingCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *evccEnableChargingCall) TypedReturns(a error) *evccEnableChargingCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *evccEnableChargingCall) ReturnsFn(fn func() error) *evccEnableChargingCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *evccEnableChargingCall) TypedRun(fn func()) *evccEnableChargingCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *evccEnableChargingCall) OnCleanup() *evccCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *evccEnableChargingCall) OnDisableCharging() *evccDisableChargingCall {
	return _c.Parent.OnDisableCharging()
}

func (_c *evccEnableChargingCall) OnEnableCharging() *evccEnableChargingCall {
	return _c.Parent.OnEnableCharging()
}

func (_c *evccEnableChargingCall) OnGetError() *evccGetErrorCall {
	return _c.Parent.OnGetError()
}

func (_c *evccEnableChargingCall) OnGetMaxChargingCurrent() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrent()
}

func (_c *evccEnableChargingCall) OnGetState() *evccGetStateCall {
	return _c.Parent.OnGetState()
}

func (_c *evccEnableChargingCall) OnGetStatusChangeChannel() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannel()
}

func (_c *evccEnableChargingCall) OnGetType() *evccGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *evccEnableChargingCall) OnInit() *evccInitCall {
	return _c.Parent.OnInit()
}

func (_c *evccEnableChargingCall) OnLock() *evccLockCall {
	return _c.Parent.OnLock()
}

func (_c *evccEnableChargingCall) OnReset() *evccResetCall {
	return _c.Parent.OnReset()
}

func (_c *evccEnableChargingCall) OnSetMaxChargingCurrent(value float64) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrent(value)
}

func (_c *evccEnableChargingCall) OnUnlock() *evccUnlockCall {
	return _c.Parent.OnUnlock()
}

func (_c *evccEnableChargingCall) OnCleanupRaw() *evccCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *evccEnableChargingCall) OnDisableChargingRaw() *evccDisableChargingCall {
	return _c.Parent.OnDisableChargingRaw()
}

func (_c *evccEnableChargingCall) OnEnableChargingRaw() *evccEnableChargingCall {
	return _c.Parent.OnEnableChargingRaw()
}

func (_c *evccEnableChargingCall) OnGetErrorRaw() *evccGetErrorCall {
	return _c.Parent.OnGetErrorRaw()
}

func (_c *evccEnableChargingCall) OnGetMaxChargingCurrentRaw() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrentRaw()
}

func (_c *evccEnableChargingCall) OnGetStateRaw() *evccGetStateCall {
	return _c.Parent.OnGetStateRaw()
}

func (_c *evccEnableChargingCall) OnGetStatusChangeChannelRaw() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannelRaw()
}

func (_c *evccEnableChargingCall) OnGetTypeRaw() *evccGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *evccEnableChargingCall) OnInitRaw() *evccInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *evccEnableChargingCall) OnLockRaw() *evccLockCall {
	return _c.Parent.OnLockRaw()
}

func (_c *evccEnableChargingCall) OnResetRaw() *evccResetCall {
	return _c.Parent.OnResetRaw()
}

func (_c *evccEnableChargingCall) OnSetMaxChargingCurrentRaw(value interface{}) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrentRaw(value)
}

func (_c *evccEnableChargingCall) OnUnlockRaw() *evccUnlockCall {
	return _c.Parent.OnUnlockRaw()
}

func (_m *evccMock) GetError() string {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() string); ok {
		return _rf()
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *evccMock) OnGetError() *evccGetErrorCall {
	return &evccGetErrorCall{Call: _m.Mock.On("GetError"), Parent: _m}
}

func (_m *evccMock) OnGetErrorRaw() *evccGetErrorCall {
	return &evccGetErrorCall{Call: _m.Mock.On("GetError"), Parent: _m}
}

type evccGetErrorCall struct {
	*mock.Call
	Parent *evccMock
}

func (_c *evccGetErrorCall) Panic(msg string) *evccGetErrorCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *evccGetErrorCall) Once() *evccGetErrorCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *evccGetErrorCall) Twice() *evccGetErrorCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *evccGetErrorCall) Times(i int) *evccGetErrorCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *evccGetErrorCall) WaitUntil(w <-chan time.Time) *evccGetErrorCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *evccGetErrorCall) After(d time.Duration) *evccGetErrorCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *evccGetErrorCall) Run(fn func(args mock.Arguments)) *evccGetErrorCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *evccGetErrorCall) Maybe() *evccGetErrorCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *evccGetErrorCall) TypedReturns(a string) *evccGetErrorCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *evccGetErrorCall) ReturnsFn(fn func() string) *evccGetErrorCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *evccGetErrorCall) TypedRun(fn func()) *evccGetErrorCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *evccGetErrorCall) OnCleanup() *evccCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *evccGetErrorCall) OnDisableCharging() *evccDisableChargingCall {
	return _c.Parent.OnDisableCharging()
}

func (_c *evccGetErrorCall) OnEnableCharging() *evccEnableChargingCall {
	return _c.Parent.OnEnableCharging()
}

func (_c *evccGetErrorCall) OnGetError() *evccGetErrorCall {
	return _c.Parent.OnGetError()
}

func (_c *evccGetErrorCall) OnGetMaxChargingCurrent() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrent()
}

func (_c *evccGetErrorCall) OnGetState() *evccGetStateCall {
	return _c.Parent.OnGetState()
}

func (_c *evccGetErrorCall) OnGetStatusChangeChannel() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannel()
}

func (_c *evccGetErrorCall) OnGetType() *evccGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *evccGetErrorCall) OnInit() *evccInitCall {
	return _c.Parent.OnInit()
}

func (_c *evccGetErrorCall) OnLock() *evccLockCall {
	return _c.Parent.OnLock()
}

func (_c *evccGetErrorCall) OnReset() *evccResetCall {
	return _c.Parent.OnReset()
}

func (_c *evccGetErrorCall) OnSetMaxChargingCurrent(value float64) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrent(value)
}

func (_c *evccGetErrorCall) OnUnlock() *evccUnlockCall {
	return _c.Parent.OnUnlock()
}

func (_c *evccGetErrorCall) OnCleanupRaw() *evccCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *evccGetErrorCall) OnDisableChargingRaw() *evccDisableChargingCall {
	return _c.Parent.OnDisableChargingRaw()
}

func (_c *evccGetErrorCall) OnEnableChargingRaw() *evccEnableChargingCall {
	return _c.Parent.OnEnableChargingRaw()
}

func (_c *evccGetErrorCall) OnGetErrorRaw() *evccGetErrorCall {
	return _c.Parent.OnGetErrorRaw()
}

func (_c *evccGetErrorCall) OnGetMaxChargingCurrentRaw() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrentRaw()
}

func (_c *evccGetErrorCall) OnGetStateRaw() *evccGetStateCall {
	return _c.Parent.OnGetStateRaw()
}

func (_c *evccGetErrorCall) OnGetStatusChangeChannelRaw() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannelRaw()
}

func (_c *evccGetErrorCall) OnGetTypeRaw() *evccGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *evccGetErrorCall) OnInitRaw() *evccInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *evccGetErrorCall) OnLockRaw() *evccLockCall {
	return _c.Parent.OnLockRaw()
}

func (_c *evccGetErrorCall) OnResetRaw() *evccResetCall {
	return _c.Parent.OnResetRaw()
}

func (_c *evccGetErrorCall) OnSetMaxChargingCurrentRaw(value interface{}) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrentRaw(value)
}

func (_c *evccGetErrorCall) OnUnlockRaw() *evccUnlockCall {
	return _c.Parent.OnUnlockRaw()
}

func (_m *evccMock) GetMaxChargingCurrent() float64 {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() float64); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(float64)

	return _ra0
}

func (_m *evccMock) OnGetMaxChargingCurrent() *evccGetMaxChargingCurrentCall {
	return &evccGetMaxChargingCurrentCall{Call: _m.Mock.On("GetMaxChargingCurrent"), Parent: _m}
}

func (_m *evccMock) OnGetMaxChargingCurrentRaw() *evccGetMaxChargingCurrentCall {
	return &evccGetMaxChargingCurrentCall{Call: _m.Mock.On("GetMaxChargingCurrent"), Parent: _m}
}

type evccGetMaxChargingCurrentCall struct {
	*mock.Call
	Parent *evccMock
}

func (_c *evccGetMaxChargingCurrentCall) Panic(msg string) *evccGetMaxChargingCurrentCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *evccGetMaxChargingCurrentCall) Once() *evccGetMaxChargingCurrentCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *evccGetMaxChargingCurrentCall) Twice() *evccGetMaxChargingCurrentCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *evccGetMaxChargingCurrentCall) Times(i int) *evccGetMaxChargingCurrentCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *evccGetMaxChargingCurrentCall) WaitUntil(w <-chan time.Time) *evccGetMaxChargingCurrentCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *evccGetMaxChargingCurrentCall) After(d time.Duration) *evccGetMaxChargingCurrentCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *evccGetMaxChargingCurrentCall) Run(fn func(args mock.Arguments)) *evccGetMaxChargingCurrentCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *evccGetMaxChargingCurrentCall) Maybe() *evccGetMaxChargingCurrentCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *evccGetMaxChargingCurrentCall) TypedReturns(a float64) *evccGetMaxChargingCurrentCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *evccGetMaxChargingCurrentCall) ReturnsFn(fn func() float64) *evccGetMaxChargingCurrentCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *evccGetMaxChargingCurrentCall) TypedRun(fn func()) *evccGetMaxChargingCurrentCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *evccGetMaxChargingCurrentCall) OnCleanup() *evccCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *evccGetMaxChargingCurrentCall) OnDisableCharging() *evccDisableChargingCall {
	return _c.Parent.OnDisableCharging()
}

func (_c *evccGetMaxChargingCurrentCall) OnEnableCharging() *evccEnableChargingCall {
	return _c.Parent.OnEnableCharging()
}

func (_c *evccGetMaxChargingCurrentCall) OnGetError() *evccGetErrorCall {
	return _c.Parent.OnGetError()
}

func (_c *evccGetMaxChargingCurrentCall) OnGetMaxChargingCurrent() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrent()
}

func (_c *evccGetMaxChargingCurrentCall) OnGetState() *evccGetStateCall {
	return _c.Parent.OnGetState()
}

func (_c *evccGetMaxChargingCurrentCall) OnGetStatusChangeChannel() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannel()
}

func (_c *evccGetMaxChargingCurrentCall) OnGetType() *evccGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *evccGetMaxChargingCurrentCall) OnInit() *evccInitCall {
	return _c.Parent.OnInit()
}

func (_c *evccGetMaxChargingCurrentCall) OnLock() *evccLockCall {
	return _c.Parent.OnLock()
}

func (_c *evccGetMaxChargingCurrentCall) OnReset() *evccResetCall {
	return _c.Parent.OnReset()
}

func (_c *evccGetMaxChargingCurrentCall) OnSetMaxChargingCurrent(value float64) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrent(value)
}

func (_c *evccGetMaxChargingCurrentCall) OnUnlock() *evccUnlockCall {
	return _c.Parent.OnUnlock()
}

func (_c *evccGetMaxChargingCurrentCall) OnCleanupRaw() *evccCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *evccGetMaxChargingCurrentCall) OnDisableChargingRaw() *evccDisableChargingCall {
	return _c.Parent.OnDisableChargingRaw()
}

func (_c *evccGetMaxChargingCurrentCall) OnEnableChargingRaw() *evccEnableChargingCall {
	return _c.Parent.OnEnableChargingRaw()
}

func (_c *evccGetMaxChargingCurrentCall) OnGetErrorRaw() *evccGetErrorCall {
	return _c.Parent.OnGetErrorRaw()
}

func (_c *evccGetMaxChargingCurrentCall) OnGetMaxChargingCurrentRaw() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrentRaw()
}

func (_c *evccGetMaxChargingCurrentCall) OnGetStateRaw() *evccGetStateCall {
	return _c.Parent.OnGetStateRaw()
}

func (_c *evccGetMaxChargingCurrentCall) OnGetStatusChangeChannelRaw() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannelRaw()
}

func (_c *evccGetMaxChargingCurrentCall) OnGetTypeRaw() *evccGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *evccGetMaxChargingCurrentCall) OnInitRaw() *evccInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *evccGetMaxChargingCurrentCall) OnLockRaw() *evccLockCall {
	return _c.Parent.OnLockRaw()
}

func (_c *evccGetMaxChargingCurrentCall) OnResetRaw() *evccResetCall {
	return _c.Parent.OnResetRaw()
}

func (_c *evccGetMaxChargingCurrentCall) OnSetMaxChargingCurrentRaw(value interface{}) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrentRaw(value)
}

func (_c *evccGetMaxChargingCurrentCall) OnUnlockRaw() *evccUnlockCall {
	return _c.Parent.OnUnlockRaw()
}

func (_m *evccMock) GetState() CarState {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() CarState); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(CarState)

	return _ra0
}

func (_m *evccMock) OnGetState() *evccGetStateCall {
	return &evccGetStateCall{Call: _m.Mock.On("GetState"), Parent: _m}
}

func (_m *evccMock) OnGetStateRaw() *evccGetStateCall {
	return &evccGetStateCall{Call: _m.Mock.On("GetState"), Parent: _m}
}

type evccGetStateCall struct {
	*mock.Call
	Parent *evccMock
}

func (_c *evccGetStateCall) Panic(msg string) *evccGetStateCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *evccGetStateCall) Once() *evccGetStateCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *evccGetStateCall) Twice() *evccGetStateCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *evccGetStateCall) Times(i int) *evccGetStateCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *evccGetStateCall) WaitUntil(w <-chan time.Time) *evccGetStateCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *evccGetStateCall) After(d time.Duration) *evccGetStateCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *evccGetStateCall) Run(fn func(args mock.Arguments)) *evccGetStateCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *evccGetStateCall) Maybe() *evccGetStateCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *evccGetStateCall) TypedReturns(a CarState) *evccGetStateCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *evccGetStateCall) ReturnsFn(fn func() CarState) *evccGetStateCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *evccGetStateCall) TypedRun(fn func()) *evccGetStateCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *evccGetStateCall) OnCleanup() *evccCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *evccGetStateCall) OnDisableCharging() *evccDisableChargingCall {
	return _c.Parent.OnDisableCharging()
}

func (_c *evccGetStateCall) OnEnableCharging() *evccEnableChargingCall {
	return _c.Parent.OnEnableCharging()
}

func (_c *evccGetStateCall) OnGetError() *evccGetErrorCall {
	return _c.Parent.OnGetError()
}

func (_c *evccGetStateCall) OnGetMaxChargingCurrent() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrent()
}

func (_c *evccGetStateCall) OnGetState() *evccGetStateCall {
	return _c.Parent.OnGetState()
}

func (_c *evccGetStateCall) OnGetStatusChangeChannel() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannel()
}

func (_c *evccGetStateCall) OnGetType() *evccGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *evccGetStateCall) OnInit() *evccInitCall {
	return _c.Parent.OnInit()
}

func (_c *evccGetStateCall) OnLock() *evccLockCall {
	return _c.Parent.OnLock()
}

func (_c *evccGetStateCall) OnReset() *evccResetCall {
	return _c.Parent.OnReset()
}

func (_c *evccGetStateCall) OnSetMaxChargingCurrent(value float64) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrent(value)
}

func (_c *evccGetStateCall) OnUnlock() *evccUnlockCall {
	return _c.Parent.OnUnlock()
}

func (_c *evccGetStateCall) OnCleanupRaw() *evccCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *evccGetStateCall) OnDisableChargingRaw() *evccDisableChargingCall {
	return _c.Parent.OnDisableChargingRaw()
}

func (_c *evccGetStateCall) OnEnableChargingRaw() *evccEnableChargingCall {
	return _c.Parent.OnEnableChargingRaw()
}

func (_c *evccGetStateCall) OnGetErrorRaw() *evccGetErrorCall {
	return _c.Parent.OnGetErrorRaw()
}

func (_c *evccGetStateCall) OnGetMaxChargingCurrentRaw() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrentRaw()
}

func (_c *evccGetStateCall) OnGetStateRaw() *evccGetStateCall {
	return _c.Parent.OnGetStateRaw()
}

func (_c *evccGetStateCall) OnGetStatusChangeChannelRaw() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannelRaw()
}

func (_c *evccGetStateCall) OnGetTypeRaw() *evccGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *evccGetStateCall) OnInitRaw() *evccInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *evccGetStateCall) OnLockRaw() *evccLockCall {
	return _c.Parent.OnLockRaw()
}

func (_c *evccGetStateCall) OnResetRaw() *evccResetCall {
	return _c.Parent.OnResetRaw()
}

func (_c *evccGetStateCall) OnSetMaxChargingCurrentRaw(value interface{}) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrentRaw(value)
}

func (_c *evccGetStateCall) OnUnlockRaw() *evccUnlockCall {
	return _c.Parent.OnUnlockRaw()
}

func (_m *evccMock) GetStatusChangeChannel() <-chan StateNotification {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() <-chan StateNotification); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(<-chan StateNotification)

	return _ra0
}

func (_m *evccMock) OnGetStatusChangeChannel() *evccGetStatusChangeChannelCall {
	return &evccGetStatusChangeChannelCall{Call: _m.Mock.On("GetStatusChangeChannel"), Parent: _m}
}

func (_m *evccMock) OnGetStatusChangeChannelRaw() *evccGetStatusChangeChannelCall {
	return &evccGetStatusChangeChannelCall{Call: _m.Mock.On("GetStatusChangeChannel"), Parent: _m}
}

type evccGetStatusChangeChannelCall struct {
	*mock.Call
	Parent *evccMock
}

func (_c *evccGetStatusChangeChannelCall) Panic(msg string) *evccGetStatusChangeChannelCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *evccGetStatusChangeChannelCall) Once() *evccGetStatusChangeChannelCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *evccGetStatusChangeChannelCall) Twice() *evccGetStatusChangeChannelCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *evccGetStatusChangeChannelCall) Times(i int) *evccGetStatusChangeChannelCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *evccGetStatusChangeChannelCall) WaitUntil(w <-chan time.Time) *evccGetStatusChangeChannelCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *evccGetStatusChangeChannelCall) After(d time.Duration) *evccGetStatusChangeChannelCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *evccGetStatusChangeChannelCall) Run(fn func(args mock.Arguments)) *evccGetStatusChangeChannelCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *evccGetStatusChangeChannelCall) Maybe() *evccGetStatusChangeChannelCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *evccGetStatusChangeChannelCall) TypedReturns(a <-chan StateNotification) *evccGetStatusChangeChannelCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *evccGetStatusChangeChannelCall) ReturnsFn(fn func() <-chan StateNotification) *evccGetStatusChangeChannelCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *evccGetStatusChangeChannelCall) TypedRun(fn func()) *evccGetStatusChangeChannelCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *evccGetStatusChangeChannelCall) OnCleanup() *evccCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *evccGetStatusChangeChannelCall) OnDisableCharging() *evccDisableChargingCall {
	return _c.Parent.OnDisableCharging()
}

func (_c *evccGetStatusChangeChannelCall) OnEnableCharging() *evccEnableChargingCall {
	return _c.Parent.OnEnableCharging()
}

func (_c *evccGetStatusChangeChannelCall) OnGetError() *evccGetErrorCall {
	return _c.Parent.OnGetError()
}

func (_c *evccGetStatusChangeChannelCall) OnGetMaxChargingCurrent() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrent()
}

func (_c *evccGetStatusChangeChannelCall) OnGetState() *evccGetStateCall {
	return _c.Parent.OnGetState()
}

func (_c *evccGetStatusChangeChannelCall) OnGetStatusChangeChannel() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannel()
}

func (_c *evccGetStatusChangeChannelCall) OnGetType() *evccGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *evccGetStatusChangeChannelCall) OnInit() *evccInitCall {
	return _c.Parent.OnInit()
}

func (_c *evccGetStatusChangeChannelCall) OnLock() *evccLockCall {
	return _c.Parent.OnLock()
}

func (_c *evccGetStatusChangeChannelCall) OnReset() *evccResetCall {
	return _c.Parent.OnReset()
}

func (_c *evccGetStatusChangeChannelCall) OnSetMaxChargingCurrent(value float64) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrent(value)
}

func (_c *evccGetStatusChangeChannelCall) OnUnlock() *evccUnlockCall {
	return _c.Parent.OnUnlock()
}

func (_c *evccGetStatusChangeChannelCall) OnCleanupRaw() *evccCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *evccGetStatusChangeChannelCall) OnDisableChargingRaw() *evccDisableChargingCall {
	return _c.Parent.OnDisableChargingRaw()
}

func (_c *evccGetStatusChangeChannelCall) OnEnableChargingRaw() *evccEnableChargingCall {
	return _c.Parent.OnEnableChargingRaw()
}

func (_c *evccGetStatusChangeChannelCall) OnGetErrorRaw() *evccGetErrorCall {
	return _c.Parent.OnGetErrorRaw()
}

func (_c *evccGetStatusChangeChannelCall) OnGetMaxChargingCurrentRaw() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrentRaw()
}

func (_c *evccGetStatusChangeChannelCall) OnGetStateRaw() *evccGetStateCall {
	return _c.Parent.OnGetStateRaw()
}

func (_c *evccGetStatusChangeChannelCall) OnGetStatusChangeChannelRaw() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannelRaw()
}

func (_c *evccGetStatusChangeChannelCall) OnGetTypeRaw() *evccGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *evccGetStatusChangeChannelCall) OnInitRaw() *evccInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *evccGetStatusChangeChannelCall) OnLockRaw() *evccLockCall {
	return _c.Parent.OnLockRaw()
}

func (_c *evccGetStatusChangeChannelCall) OnResetRaw() *evccResetCall {
	return _c.Parent.OnResetRaw()
}

func (_c *evccGetStatusChangeChannelCall) OnSetMaxChargingCurrentRaw(value interface{}) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrentRaw(value)
}

func (_c *evccGetStatusChangeChannelCall) OnUnlockRaw() *evccUnlockCall {
	return _c.Parent.OnUnlockRaw()
}

func (_m *evccMock) GetType() string {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() string); ok {
		return _rf()
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *evccMock) OnGetType() *evccGetTypeCall {
	return &evccGetTypeCall{Call: _m.Mock.On("GetType"), Parent: _m}
}

func (_m *evccMock) OnGetTypeRaw() *evccGetTypeCall {
	return &evccGetTypeCall{Call: _m.Mock.On("GetType"), Parent: _m}
}

type evccGetTypeCall struct {
	*mock.Call
	Parent *evccMock
}

func (_c *evccGetTypeCall) Panic(msg string) *evccGetTypeCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *evccGetTypeCall) Once() *evccGetTypeCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *evccGetTypeCall) Twice() *evccGetTypeCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *evccGetTypeCall) Times(i int) *evccGetTypeCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *evccGetTypeCall) WaitUntil(w <-chan time.Time) *evccGetTypeCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *evccGetTypeCall) After(d time.Duration) *evccGetTypeCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *evccGetTypeCall) Run(fn func(args mock.Arguments)) *evccGetTypeCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *evccGetTypeCall) Maybe() *evccGetTypeCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *evccGetTypeCall) TypedReturns(a string) *evccGetTypeCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *evccGetTypeCall) ReturnsFn(fn func() string) *evccGetTypeCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *evccGetTypeCall) TypedRun(fn func()) *evccGetTypeCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *evccGetTypeCall) OnCleanup() *evccCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *evccGetTypeCall) OnDisableCharging() *evccDisableChargingCall {
	return _c.Parent.OnDisableCharging()
}

func (_c *evccGetTypeCall) OnEnableCharging() *evccEnableChargingCall {
	return _c.Parent.OnEnableCharging()
}

func (_c *evccGetTypeCall) OnGetError() *evccGetErrorCall {
	return _c.Parent.OnGetError()
}

func (_c *evccGetTypeCall) OnGetMaxChargingCurrent() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrent()
}

func (_c *evccGetTypeCall) OnGetState() *evccGetStateCall {
	return _c.Parent.OnGetState()
}

func (_c *evccGetTypeCall) OnGetStatusChangeChannel() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannel()
}

func (_c *evccGetTypeCall) OnGetType() *evccGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *evccGetTypeCall) OnInit() *evccInitCall {
	return _c.Parent.OnInit()
}

func (_c *evccGetTypeCall) OnLock() *evccLockCall {
	return _c.Parent.OnLock()
}

func (_c *evccGetTypeCall) OnReset() *evccResetCall {
	return _c.Parent.OnReset()
}

func (_c *evccGetTypeCall) OnSetMaxChargingCurrent(value float64) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrent(value)
}

func (_c *evccGetTypeCall) OnUnlock() *evccUnlockCall {
	return _c.Parent.OnUnlock()
}

func (_c *evccGetTypeCall) OnCleanupRaw() *evccCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *evccGetTypeCall) OnDisableChargingRaw() *evccDisableChargingCall {
	return _c.Parent.OnDisableChargingRaw()
}

func (_c *evccGetTypeCall) OnEnableChargingRaw() *evccEnableChargingCall {
	return _c.Parent.OnEnableChargingRaw()
}

func (_c *evccGetTypeCall) OnGetErrorRaw() *evccGetErrorCall {
	return _c.Parent.OnGetErrorRaw()
}

func (_c *evccGetTypeCall) OnGetMaxChargingCurrentRaw() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrentRaw()
}

func (_c *evccGetTypeCall) OnGetStateRaw() *evccGetStateCall {
	return _c.Parent.OnGetStateRaw()
}

func (_c *evccGetTypeCall) OnGetStatusChangeChannelRaw() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannelRaw()
}

func (_c *evccGetTypeCall) OnGetTypeRaw() *evccGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *evccGetTypeCall) OnInitRaw() *evccInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *evccGetTypeCall) OnLockRaw() *evccLockCall {
	return _c.Parent.OnLockRaw()
}

func (_c *evccGetTypeCall) OnResetRaw() *evccResetCall {
	return _c.Parent.OnResetRaw()
}

func (_c *evccGetTypeCall) OnSetMaxChargingCurrentRaw(value interface{}) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrentRaw(value)
}

func (_c *evccGetTypeCall) OnUnlockRaw() *evccUnlockCall {
	return _c.Parent.OnUnlockRaw()
}

func (_m *evccMock) Init(_ context.Context) error {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() error); ok {
		return _rf()
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *evccMock) OnInit() *evccInitCall {
	return &evccInitCall{Call: _m.Mock.On("Init"), Parent: _m}
}

func (_m *evccMock) OnInitRaw() *evccInitCall {
	return &evccInitCall{Call: _m.Mock.On("Init"), Parent: _m}
}

type evccInitCall struct {
	*mock.Call
	Parent *evccMock
}

func (_c *evccInitCall) Panic(msg string) *evccInitCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *evccInitCall) Once() *evccInitCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *evccInitCall) Twice() *evccInitCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *evccInitCall) Times(i int) *evccInitCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *evccInitCall) WaitUntil(w <-chan time.Time) *evccInitCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *evccInitCall) After(d time.Duration) *evccInitCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *evccInitCall) Run(fn func(args mock.Arguments)) *evccInitCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *evccInitCall) Maybe() *evccInitCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *evccInitCall) TypedReturns(a error) *evccInitCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *evccInitCall) ReturnsFn(fn func() error) *evccInitCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *evccInitCall) TypedRun(fn func()) *evccInitCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *evccInitCall) OnCleanup() *evccCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *evccInitCall) OnDisableCharging() *evccDisableChargingCall {
	return _c.Parent.OnDisableCharging()
}

func (_c *evccInitCall) OnEnableCharging() *evccEnableChargingCall {
	return _c.Parent.OnEnableCharging()
}

func (_c *evccInitCall) OnGetError() *evccGetErrorCall {
	return _c.Parent.OnGetError()
}

func (_c *evccInitCall) OnGetMaxChargingCurrent() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrent()
}

func (_c *evccInitCall) OnGetState() *evccGetStateCall {
	return _c.Parent.OnGetState()
}

func (_c *evccInitCall) OnGetStatusChangeChannel() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannel()
}

func (_c *evccInitCall) OnGetType() *evccGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *evccInitCall) OnInit() *evccInitCall {
	return _c.Parent.OnInit()
}

func (_c *evccInitCall) OnLock() *evccLockCall {
	return _c.Parent.OnLock()
}

func (_c *evccInitCall) OnReset() *evccResetCall {
	return _c.Parent.OnReset()
}

func (_c *evccInitCall) OnSetMaxChargingCurrent(value float64) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrent(value)
}

func (_c *evccInitCall) OnUnlock() *evccUnlockCall {
	return _c.Parent.OnUnlock()
}

func (_c *evccInitCall) OnCleanupRaw() *evccCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *evccInitCall) OnDisableChargingRaw() *evccDisableChargingCall {
	return _c.Parent.OnDisableChargingRaw()
}

func (_c *evccInitCall) OnEnableChargingRaw() *evccEnableChargingCall {
	return _c.Parent.OnEnableChargingRaw()
}

func (_c *evccInitCall) OnGetErrorRaw() *evccGetErrorCall {
	return _c.Parent.OnGetErrorRaw()
}

func (_c *evccInitCall) OnGetMaxChargingCurrentRaw() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrentRaw()
}

func (_c *evccInitCall) OnGetStateRaw() *evccGetStateCall {
	return _c.Parent.OnGetStateRaw()
}

func (_c *evccInitCall) OnGetStatusChangeChannelRaw() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannelRaw()
}

func (_c *evccInitCall) OnGetTypeRaw() *evccGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *evccInitCall) OnInitRaw() *evccInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *evccInitCall) OnLockRaw() *evccLockCall {
	return _c.Parent.OnLockRaw()
}

func (_c *evccInitCall) OnResetRaw() *evccResetCall {
	return _c.Parent.OnResetRaw()
}

func (_c *evccInitCall) OnSetMaxChargingCurrentRaw(value interface{}) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrentRaw(value)
}

func (_c *evccInitCall) OnUnlockRaw() *evccUnlockCall {
	return _c.Parent.OnUnlockRaw()
}

func (_m *evccMock) Lock() {
	_m.Called()
}

func (_m *evccMock) OnLock() *evccLockCall {
	return &evccLockCall{Call: _m.Mock.On("Lock"), Parent: _m}
}

func (_m *evccMock) OnLockRaw() *evccLockCall {
	return &evccLockCall{Call: _m.Mock.On("Lock"), Parent: _m}
}

type evccLockCall struct {
	*mock.Call
	Parent *evccMock
}

func (_c *evccLockCall) Panic(msg string) *evccLockCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *evccLockCall) Once() *evccLockCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *evccLockCall) Twice() *evccLockCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *evccLockCall) Times(i int) *evccLockCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *evccLockCall) WaitUntil(w <-chan time.Time) *evccLockCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *evccLockCall) After(d time.Duration) *evccLockCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *evccLockCall) Run(fn func(args mock.Arguments)) *evccLockCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *evccLockCall) Maybe() *evccLockCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *evccLockCall) TypedRun(fn func()) *evccLockCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *evccLockCall) OnCleanup() *evccCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *evccLockCall) OnDisableCharging() *evccDisableChargingCall {
	return _c.Parent.OnDisableCharging()
}

func (_c *evccLockCall) OnEnableCharging() *evccEnableChargingCall {
	return _c.Parent.OnEnableCharging()
}

func (_c *evccLockCall) OnGetError() *evccGetErrorCall {
	return _c.Parent.OnGetError()
}

func (_c *evccLockCall) OnGetMaxChargingCurrent() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrent()
}

func (_c *evccLockCall) OnGetState() *evccGetStateCall {
	return _c.Parent.OnGetState()
}

func (_c *evccLockCall) OnGetStatusChangeChannel() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannel()
}

func (_c *evccLockCall) OnGetType() *evccGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *evccLockCall) OnInit() *evccInitCall {
	return _c.Parent.OnInit()
}

func (_c *evccLockCall) OnLock() *evccLockCall {
	return _c.Parent.OnLock()
}

func (_c *evccLockCall) OnReset() *evccResetCall {
	return _c.Parent.OnReset()
}

func (_c *evccLockCall) OnSetMaxChargingCurrent(value float64) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrent(value)
}

func (_c *evccLockCall) OnUnlock() *evccUnlockCall {
	return _c.Parent.OnUnlock()
}

func (_c *evccLockCall) OnCleanupRaw() *evccCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *evccLockCall) OnDisableChargingRaw() *evccDisableChargingCall {
	return _c.Parent.OnDisableChargingRaw()
}

func (_c *evccLockCall) OnEnableChargingRaw() *evccEnableChargingCall {
	return _c.Parent.OnEnableChargingRaw()
}

func (_c *evccLockCall) OnGetErrorRaw() *evccGetErrorCall {
	return _c.Parent.OnGetErrorRaw()
}

func (_c *evccLockCall) OnGetMaxChargingCurrentRaw() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrentRaw()
}

func (_c *evccLockCall) OnGetStateRaw() *evccGetStateCall {
	return _c.Parent.OnGetStateRaw()
}

func (_c *evccLockCall) OnGetStatusChangeChannelRaw() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannelRaw()
}

func (_c *evccLockCall) OnGetTypeRaw() *evccGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *evccLockCall) OnInitRaw() *evccInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *evccLockCall) OnLockRaw() *evccLockCall {
	return _c.Parent.OnLockRaw()
}

func (_c *evccLockCall) OnResetRaw() *evccResetCall {
	return _c.Parent.OnResetRaw()
}

func (_c *evccLockCall) OnSetMaxChargingCurrentRaw(value interface{}) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrentRaw(value)
}

func (_c *evccLockCall) OnUnlockRaw() *evccUnlockCall {
	return _c.Parent.OnUnlockRaw()
}

func (_m *evccMock) Reset() {
	_m.Called()
}

func (_m *evccMock) OnReset() *evccResetCall {
	return &evccResetCall{Call: _m.Mock.On("Reset"), Parent: _m}
}

func (_m *evccMock) OnResetRaw() *evccResetCall {
	return &evccResetCall{Call: _m.Mock.On("Reset"), Parent: _m}
}

type evccResetCall struct {
	*mock.Call
	Parent *evccMock
}

func (_c *evccResetCall) Panic(msg string) *evccResetCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *evccResetCall) Once() *evccResetCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *evccResetCall) Twice() *evccResetCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *evccResetCall) Times(i int) *evccResetCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *evccResetCall) WaitUntil(w <-chan time.Time) *evccResetCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *evccResetCall) After(d time.Duration) *evccResetCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *evccResetCall) Run(fn func(args mock.Arguments)) *evccResetCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *evccResetCall) Maybe() *evccResetCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *evccResetCall) TypedRun(fn func()) *evccResetCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *evccResetCall) OnCleanup() *evccCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *evccResetCall) OnDisableCharging() *evccDisableChargingCall {
	return _c.Parent.OnDisableCharging()
}

func (_c *evccResetCall) OnEnableCharging() *evccEnableChargingCall {
	return _c.Parent.OnEnableCharging()
}

func (_c *evccResetCall) OnGetError() *evccGetErrorCall {
	return _c.Parent.OnGetError()
}

func (_c *evccResetCall) OnGetMaxChargingCurrent() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrent()
}

func (_c *evccResetCall) OnGetState() *evccGetStateCall {
	return _c.Parent.OnGetState()
}

func (_c *evccResetCall) OnGetStatusChangeChannel() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannel()
}

func (_c *evccResetCall) OnGetType() *evccGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *evccResetCall) OnInit() *evccInitCall {
	return _c.Parent.OnInit()
}

func (_c *evccResetCall) OnLock() *evccLockCall {
	return _c.Parent.OnLock()
}

func (_c *evccResetCall) OnReset() *evccResetCall {
	return _c.Parent.OnReset()
}

func (_c *evccResetCall) OnSetMaxChargingCurrent(value float64) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrent(value)
}

func (_c *evccResetCall) OnUnlock() *evccUnlockCall {
	return _c.Parent.OnUnlock()
}

func (_c *evccResetCall) OnCleanupRaw() *evccCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *evccResetCall) OnDisableChargingRaw() *evccDisableChargingCall {
	return _c.Parent.OnDisableChargingRaw()
}

func (_c *evccResetCall) OnEnableChargingRaw() *evccEnableChargingCall {
	return _c.Parent.OnEnableChargingRaw()
}

func (_c *evccResetCall) OnGetErrorRaw() *evccGetErrorCall {
	return _c.Parent.OnGetErrorRaw()
}

func (_c *evccResetCall) OnGetMaxChargingCurrentRaw() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrentRaw()
}

func (_c *evccResetCall) OnGetStateRaw() *evccGetStateCall {
	return _c.Parent.OnGetStateRaw()
}

func (_c *evccResetCall) OnGetStatusChangeChannelRaw() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannelRaw()
}

func (_c *evccResetCall) OnGetTypeRaw() *evccGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *evccResetCall) OnInitRaw() *evccInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *evccResetCall) OnLockRaw() *evccLockCall {
	return _c.Parent.OnLockRaw()
}

func (_c *evccResetCall) OnResetRaw() *evccResetCall {
	return _c.Parent.OnResetRaw()
}

func (_c *evccResetCall) OnSetMaxChargingCurrentRaw(value interface{}) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrentRaw(value)
}

func (_c *evccResetCall) OnUnlockRaw() *evccUnlockCall {
	return _c.Parent.OnUnlockRaw()
}

func (_m *evccMock) SetMaxChargingCurrent(value float64) error {
	_ret := _m.Called(value)

	if _rf, ok := _ret.Get(0).(func(float64) error); ok {
		return _rf(value)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *evccMock) OnSetMaxChargingCurrent(value float64) *evccSetMaxChargingCurrentCall {
	return &evccSetMaxChargingCurrentCall{Call: _m.Mock.On("SetMaxChargingCurrent", value), Parent: _m}
}

func (_m *evccMock) OnSetMaxChargingCurrentRaw(value interface{}) *evccSetMaxChargingCurrentCall {
	return &evccSetMaxChargingCurrentCall{Call: _m.Mock.On("SetMaxChargingCurrent", value), Parent: _m}
}

type evccSetMaxChargingCurrentCall struct {
	*mock.Call
	Parent *evccMock
}

func (_c *evccSetMaxChargingCurrentCall) Panic(msg string) *evccSetMaxChargingCurrentCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *evccSetMaxChargingCurrentCall) Once() *evccSetMaxChargingCurrentCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *evccSetMaxChargingCurrentCall) Twice() *evccSetMaxChargingCurrentCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *evccSetMaxChargingCurrentCall) Times(i int) *evccSetMaxChargingCurrentCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *evccSetMaxChargingCurrentCall) WaitUntil(w <-chan time.Time) *evccSetMaxChargingCurrentCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *evccSetMaxChargingCurrentCall) After(d time.Duration) *evccSetMaxChargingCurrentCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *evccSetMaxChargingCurrentCall) Run(fn func(args mock.Arguments)) *evccSetMaxChargingCurrentCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *evccSetMaxChargingCurrentCall) Maybe() *evccSetMaxChargingCurrentCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *evccSetMaxChargingCurrentCall) TypedReturns(a error) *evccSetMaxChargingCurrentCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *evccSetMaxChargingCurrentCall) ReturnsFn(fn func(float64) error) *evccSetMaxChargingCurrentCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *evccSetMaxChargingCurrentCall) TypedRun(fn func(float64)) *evccSetMaxChargingCurrentCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_value, _ := args.Get(0).(float64)
		fn(_value)
	})
	return _c
}

func (_c *evccSetMaxChargingCurrentCall) OnCleanup() *evccCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *evccSetMaxChargingCurrentCall) OnDisableCharging() *evccDisableChargingCall {
	return _c.Parent.OnDisableCharging()
}

func (_c *evccSetMaxChargingCurrentCall) OnEnableCharging() *evccEnableChargingCall {
	return _c.Parent.OnEnableCharging()
}

func (_c *evccSetMaxChargingCurrentCall) OnGetError() *evccGetErrorCall {
	return _c.Parent.OnGetError()
}

func (_c *evccSetMaxChargingCurrentCall) OnGetMaxChargingCurrent() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrent()
}

func (_c *evccSetMaxChargingCurrentCall) OnGetState() *evccGetStateCall {
	return _c.Parent.OnGetState()
}

func (_c *evccSetMaxChargingCurrentCall) OnGetStatusChangeChannel() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannel()
}

func (_c *evccSetMaxChargingCurrentCall) OnGetType() *evccGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *evccSetMaxChargingCurrentCall) OnInit() *evccInitCall {
	return _c.Parent.OnInit()
}

func (_c *evccSetMaxChargingCurrentCall) OnLock() *evccLockCall {
	return _c.Parent.OnLock()
}

func (_c *evccSetMaxChargingCurrentCall) OnReset() *evccResetCall {
	return _c.Parent.OnReset()
}

func (_c *evccSetMaxChargingCurrentCall) OnSetMaxChargingCurrent(value float64) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrent(value)
}

func (_c *evccSetMaxChargingCurrentCall) OnUnlock() *evccUnlockCall {
	return _c.Parent.OnUnlock()
}

func (_c *evccSetMaxChargingCurrentCall) OnCleanupRaw() *evccCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *evccSetMaxChargingCurrentCall) OnDisableChargingRaw() *evccDisableChargingCall {
	return _c.Parent.OnDisableChargingRaw()
}

func (_c *evccSetMaxChargingCurrentCall) OnEnableChargingRaw() *evccEnableChargingCall {
	return _c.Parent.OnEnableChargingRaw()
}

func (_c *evccSetMaxChargingCurrentCall) OnGetErrorRaw() *evccGetErrorCall {
	return _c.Parent.OnGetErrorRaw()
}

func (_c *evccSetMaxChargingCurrentCall) OnGetMaxChargingCurrentRaw() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrentRaw()
}

func (_c *evccSetMaxChargingCurrentCall) OnGetStateRaw() *evccGetStateCall {
	return _c.Parent.OnGetStateRaw()
}

func (_c *evccSetMaxChargingCurrentCall) OnGetStatusChangeChannelRaw() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannelRaw()
}

func (_c *evccSetMaxChargingCurrentCall) OnGetTypeRaw() *evccGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *evccSetMaxChargingCurrentCall) OnInitRaw() *evccInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *evccSetMaxChargingCurrentCall) OnLockRaw() *evccLockCall {
	return _c.Parent.OnLockRaw()
}

func (_c *evccSetMaxChargingCurrentCall) OnResetRaw() *evccResetCall {
	return _c.Parent.OnResetRaw()
}

func (_c *evccSetMaxChargingCurrentCall) OnSetMaxChargingCurrentRaw(value interface{}) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrentRaw(value)
}

func (_c *evccSetMaxChargingCurrentCall) OnUnlockRaw() *evccUnlockCall {
	return _c.Parent.OnUnlockRaw()
}

func (_m *evccMock) Unlock() {
	_m.Called()
}

func (_m *evccMock) OnUnlock() *evccUnlockCall {
	return &evccUnlockCall{Call: _m.Mock.On("Unlock"), Parent: _m}
}

func (_m *evccMock) OnUnlockRaw() *evccUnlockCall {
	return &evccUnlockCall{Call: _m.Mock.On("Unlock"), Parent: _m}
}

type evccUnlockCall struct {
	*mock.Call
	Parent *evccMock
}

func (_c *evccUnlockCall) Panic(msg string) *evccUnlockCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *evccUnlockCall) Once() *evccUnlockCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *evccUnlockCall) Twice() *evccUnlockCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *evccUnlockCall) Times(i int) *evccUnlockCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *evccUnlockCall) WaitUntil(w <-chan time.Time) *evccUnlockCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *evccUnlockCall) After(d time.Duration) *evccUnlockCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *evccUnlockCall) Run(fn func(args mock.Arguments)) *evccUnlockCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *evccUnlockCall) Maybe() *evccUnlockCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *evccUnlockCall) TypedRun(fn func()) *evccUnlockCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *evccUnlockCall) OnCleanup() *evccCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *evccUnlockCall) OnDisableCharging() *evccDisableChargingCall {
	return _c.Parent.OnDisableCharging()
}

func (_c *evccUnlockCall) OnEnableCharging() *evccEnableChargingCall {
	return _c.Parent.OnEnableCharging()
}

func (_c *evccUnlockCall) OnGetError() *evccGetErrorCall {
	return _c.Parent.OnGetError()
}

func (_c *evccUnlockCall) OnGetMaxChargingCurrent() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrent()
}

func (_c *evccUnlockCall) OnGetState() *evccGetStateCall {
	return _c.Parent.OnGetState()
}

func (_c *evccUnlockCall) OnGetStatusChangeChannel() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannel()
}

func (_c *evccUnlockCall) OnGetType() *evccGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *evccUnlockCall) OnInit() *evccInitCall {
	return _c.Parent.OnInit()
}

func (_c *evccUnlockCall) OnLock() *evccLockCall {
	return _c.Parent.OnLock()
}

func (_c *evccUnlockCall) OnReset() *evccResetCall {
	return _c.Parent.OnReset()
}

func (_c *evccUnlockCall) OnSetMaxChargingCurrent(value float64) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrent(value)
}

func (_c *evccUnlockCall) OnUnlock() *evccUnlockCall {
	return _c.Parent.OnUnlock()
}

func (_c *evccUnlockCall) OnCleanupRaw() *evccCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *evccUnlockCall) OnDisableChargingRaw() *evccDisableChargingCall {
	return _c.Parent.OnDisableChargingRaw()
}

func (_c *evccUnlockCall) OnEnableChargingRaw() *evccEnableChargingCall {
	return _c.Parent.OnEnableChargingRaw()
}

func (_c *evccUnlockCall) OnGetErrorRaw() *evccGetErrorCall {
	return _c.Parent.OnGetErrorRaw()
}

func (_c *evccUnlockCall) OnGetMaxChargingCurrentRaw() *evccGetMaxChargingCurrentCall {
	return _c.Parent.OnGetMaxChargingCurrentRaw()
}

func (_c *evccUnlockCall) OnGetStateRaw() *evccGetStateCall {
	return _c.Parent.OnGetStateRaw()
}

func (_c *evccUnlockCall) OnGetStatusChangeChannelRaw() *evccGetStatusChangeChannelCall {
	return _c.Parent.OnGetStatusChangeChannelRaw()
}

func (_c *evccUnlockCall) OnGetTypeRaw() *evccGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *evccUnlockCall) OnInitRaw() *evccInitCall {
	return _c.Parent.OnInitRaw()
}

func (_c *evccUnlockCall) OnLockRaw() *evccLockCall {
	return _c.Parent.OnLockRaw()
}

func (_c *evccUnlockCall) OnResetRaw() *evccResetCall {
	return _c.Parent.OnResetRaw()
}

func (_c *evccUnlockCall) OnSetMaxChargingCurrentRaw(value interface{}) *evccSetMaxChargingCurrentCall {
	return _c.Parent.OnSetMaxChargingCurrentRaw(value)
}

func (_c *evccUnlockCall) OnUnlockRaw() *evccUnlockCall {
	return _c.Parent.OnUnlockRaw()
}
