// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: api.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChargePointClient is the client API for ChargePoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChargePointClient interface {
	// Display settings
	SetDisplaySettings(ctx context.Context, in *SetDisplaySettingsRequest, opts ...grpc.CallOption) (*SetDisplaySettingsResponse, error)
	GetDisplaySettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDisplaySettingsResponse, error)
	// Reader settings
	SetReaderSettings(ctx context.Context, in *SetReaderSettingsRequest, opts ...grpc.CallOption) (*SetReaderSettingsResponse, error)
	GetReaderSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetReaderSettingsResponse, error)
	// LED indicator
	SetIndicatorSettings(ctx context.Context, in *SetIndicatorSettingsRequest, opts ...grpc.CallOption) (*SetIndicatorSettingsResponse, error)
	GetIndicatorSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIndicatorSettingsResponse, error)
	// Connection settings
	GetConnectionDetails(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetConnectionDetailsResponse, error)
	ChangeConnectionDetails(ctx context.Context, in *ChangeConnectionDetailsRequest, opts ...grpc.CallOption) (*ChangeConnectionDetailsResponse, error)
	// Charge point details
	GetChargePointDetails(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetChargePointDetailsResponse, error)
	ChangeChargePointDetails(ctx context.Context, in *ChangeChargePointDetailsRequest, opts ...grpc.CallOption) (*ChangeChargePointDetailsResponse, error)
	// OCPP configuration variable management
	GetOCPPVariables(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVariablesResponse, error)
	SetOCPPVariables(ctx context.Context, in *SetVariablesRequest, opts ...grpc.CallOption) (*SetVariablesResponse, error)
	GetOCPPVariable(ctx context.Context, in *GetVariableRequest, opts ...grpc.CallOption) (*OcppVariable, error)
	// Details
	GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVersionResponse, error)
	GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatusResponse, error)
	Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type chargePointClient struct {
	cc grpc.ClientConnInterface
}

func NewChargePointClient(cc grpc.ClientConnInterface) ChargePointClient {
	return &chargePointClient{cc}
}

func (c *chargePointClient) SetDisplaySettings(ctx context.Context, in *SetDisplaySettingsRequest, opts ...grpc.CallOption) (*SetDisplaySettingsResponse, error) {
	out := new(SetDisplaySettingsResponse)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/SetDisplaySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargePointClient) GetDisplaySettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetDisplaySettingsResponse, error) {
	out := new(GetDisplaySettingsResponse)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/GetDisplaySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargePointClient) SetReaderSettings(ctx context.Context, in *SetReaderSettingsRequest, opts ...grpc.CallOption) (*SetReaderSettingsResponse, error) {
	out := new(SetReaderSettingsResponse)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/SetReaderSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargePointClient) GetReaderSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetReaderSettingsResponse, error) {
	out := new(GetReaderSettingsResponse)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/GetReaderSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargePointClient) SetIndicatorSettings(ctx context.Context, in *SetIndicatorSettingsRequest, opts ...grpc.CallOption) (*SetIndicatorSettingsResponse, error) {
	out := new(SetIndicatorSettingsResponse)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/SetIndicatorSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargePointClient) GetIndicatorSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIndicatorSettingsResponse, error) {
	out := new(GetIndicatorSettingsResponse)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/GetIndicatorSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargePointClient) GetConnectionDetails(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetConnectionDetailsResponse, error) {
	out := new(GetConnectionDetailsResponse)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/GetConnectionDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargePointClient) ChangeConnectionDetails(ctx context.Context, in *ChangeConnectionDetailsRequest, opts ...grpc.CallOption) (*ChangeConnectionDetailsResponse, error) {
	out := new(ChangeConnectionDetailsResponse)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/ChangeConnectionDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargePointClient) GetChargePointDetails(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetChargePointDetailsResponse, error) {
	out := new(GetChargePointDetailsResponse)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/GetChargePointDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargePointClient) ChangeChargePointDetails(ctx context.Context, in *ChangeChargePointDetailsRequest, opts ...grpc.CallOption) (*ChangeChargePointDetailsResponse, error) {
	out := new(ChangeChargePointDetailsResponse)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/ChangeChargePointDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargePointClient) GetOCPPVariables(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVariablesResponse, error) {
	out := new(GetVariablesResponse)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/GetOCPPVariables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargePointClient) SetOCPPVariables(ctx context.Context, in *SetVariablesRequest, opts ...grpc.CallOption) (*SetVariablesResponse, error) {
	out := new(SetVariablesResponse)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/SetOCPPVariables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargePointClient) GetOCPPVariable(ctx context.Context, in *GetVariableRequest, opts ...grpc.CallOption) (*OcppVariable, error) {
	out := new(OcppVariable)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/GetOCPPVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargePointClient) GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargePointClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargePointClient) Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ChargePoint/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChargePointServer is the server API for ChargePoint service.
// All implementations must embed UnimplementedChargePointServer
// for forward compatibility
type ChargePointServer interface {
	// Display settings
	SetDisplaySettings(context.Context, *SetDisplaySettingsRequest) (*SetDisplaySettingsResponse, error)
	GetDisplaySettings(context.Context, *emptypb.Empty) (*GetDisplaySettingsResponse, error)
	// Reader settings
	SetReaderSettings(context.Context, *SetReaderSettingsRequest) (*SetReaderSettingsResponse, error)
	GetReaderSettings(context.Context, *emptypb.Empty) (*GetReaderSettingsResponse, error)
	// LED indicator
	SetIndicatorSettings(context.Context, *SetIndicatorSettingsRequest) (*SetIndicatorSettingsResponse, error)
	GetIndicatorSettings(context.Context, *emptypb.Empty) (*GetIndicatorSettingsResponse, error)
	// Connection settings
	GetConnectionDetails(context.Context, *emptypb.Empty) (*GetConnectionDetailsResponse, error)
	ChangeConnectionDetails(context.Context, *ChangeConnectionDetailsRequest) (*ChangeConnectionDetailsResponse, error)
	// Charge point details
	GetChargePointDetails(context.Context, *emptypb.Empty) (*GetChargePointDetailsResponse, error)
	ChangeChargePointDetails(context.Context, *ChangeChargePointDetailsRequest) (*ChangeChargePointDetailsResponse, error)
	// OCPP configuration variable management
	GetOCPPVariables(context.Context, *emptypb.Empty) (*GetVariablesResponse, error)
	SetOCPPVariables(context.Context, *SetVariablesRequest) (*SetVariablesResponse, error)
	GetOCPPVariable(context.Context, *GetVariableRequest) (*OcppVariable, error)
	// Details
	GetVersion(context.Context, *emptypb.Empty) (*GetVersionResponse, error)
	GetStatus(context.Context, *emptypb.Empty) (*GetStatusResponse, error)
	Restart(context.Context, *RestartRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedChargePointServer()
}

// UnimplementedChargePointServer must be embedded to have forward compatible implementations.
type UnimplementedChargePointServer struct {
}

func (UnimplementedChargePointServer) SetDisplaySettings(context.Context, *SetDisplaySettingsRequest) (*SetDisplaySettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDisplaySettings not implemented")
}
func (UnimplementedChargePointServer) GetDisplaySettings(context.Context, *emptypb.Empty) (*GetDisplaySettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisplaySettings not implemented")
}
func (UnimplementedChargePointServer) SetReaderSettings(context.Context, *SetReaderSettingsRequest) (*SetReaderSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReaderSettings not implemented")
}
func (UnimplementedChargePointServer) GetReaderSettings(context.Context, *emptypb.Empty) (*GetReaderSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReaderSettings not implemented")
}
func (UnimplementedChargePointServer) SetIndicatorSettings(context.Context, *SetIndicatorSettingsRequest) (*SetIndicatorSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIndicatorSettings not implemented")
}
func (UnimplementedChargePointServer) GetIndicatorSettings(context.Context, *emptypb.Empty) (*GetIndicatorSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndicatorSettings not implemented")
}
func (UnimplementedChargePointServer) GetConnectionDetails(context.Context, *emptypb.Empty) (*GetConnectionDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionDetails not implemented")
}
func (UnimplementedChargePointServer) ChangeConnectionDetails(context.Context, *ChangeConnectionDetailsRequest) (*ChangeConnectionDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeConnectionDetails not implemented")
}
func (UnimplementedChargePointServer) GetChargePointDetails(context.Context, *emptypb.Empty) (*GetChargePointDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChargePointDetails not implemented")
}
func (UnimplementedChargePointServer) ChangeChargePointDetails(context.Context, *ChangeChargePointDetailsRequest) (*ChangeChargePointDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeChargePointDetails not implemented")
}
func (UnimplementedChargePointServer) GetOCPPVariables(context.Context, *emptypb.Empty) (*GetVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOCPPVariables not implemented")
}
func (UnimplementedChargePointServer) SetOCPPVariables(context.Context, *SetVariablesRequest) (*SetVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOCPPVariables not implemented")
}
func (UnimplementedChargePointServer) GetOCPPVariable(context.Context, *GetVariableRequest) (*OcppVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOCPPVariable not implemented")
}
func (UnimplementedChargePointServer) GetVersion(context.Context, *emptypb.Empty) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedChargePointServer) GetStatus(context.Context, *emptypb.Empty) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedChargePointServer) Restart(context.Context, *RestartRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedChargePointServer) mustEmbedUnimplementedChargePointServer() {}

// UnsafeChargePointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChargePointServer will
// result in compilation errors.
type UnsafeChargePointServer interface {
	mustEmbedUnimplementedChargePointServer()
}

func RegisterChargePointServer(s grpc.ServiceRegistrar, srv ChargePointServer) {
	s.RegisterService(&ChargePoint_ServiceDesc, srv)
}

func _ChargePoint_SetDisplaySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDisplaySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).SetDisplaySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/SetDisplaySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).SetDisplaySettings(ctx, req.(*SetDisplaySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargePoint_GetDisplaySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).GetDisplaySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/GetDisplaySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).GetDisplaySettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargePoint_SetReaderSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReaderSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).SetReaderSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/SetReaderSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).SetReaderSettings(ctx, req.(*SetReaderSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargePoint_GetReaderSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).GetReaderSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/GetReaderSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).GetReaderSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargePoint_SetIndicatorSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIndicatorSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).SetIndicatorSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/SetIndicatorSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).SetIndicatorSettings(ctx, req.(*SetIndicatorSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargePoint_GetIndicatorSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).GetIndicatorSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/GetIndicatorSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).GetIndicatorSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargePoint_GetConnectionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).GetConnectionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/GetConnectionDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).GetConnectionDetails(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargePoint_ChangeConnectionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeConnectionDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).ChangeConnectionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/ChangeConnectionDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).ChangeConnectionDetails(ctx, req.(*ChangeConnectionDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargePoint_GetChargePointDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).GetChargePointDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/GetChargePointDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).GetChargePointDetails(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargePoint_ChangeChargePointDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeChargePointDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).ChangeChargePointDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/ChangeChargePointDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).ChangeChargePointDetails(ctx, req.(*ChangeChargePointDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargePoint_GetOCPPVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).GetOCPPVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/GetOCPPVariables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).GetOCPPVariables(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargePoint_SetOCPPVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).SetOCPPVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/SetOCPPVariables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).SetOCPPVariables(ctx, req.(*SetVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargePoint_GetOCPPVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).GetOCPPVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/GetOCPPVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).GetOCPPVariable(ctx, req.(*GetVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargePoint_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).GetVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargePoint_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).GetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChargePoint_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChargePointServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ChargePoint/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChargePointServer).Restart(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChargePoint_ServiceDesc is the grpc.ServiceDesc for ChargePoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChargePoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ChargePoint",
	HandlerType: (*ChargePointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDisplaySettings",
			Handler:    _ChargePoint_SetDisplaySettings_Handler,
		},
		{
			MethodName: "GetDisplaySettings",
			Handler:    _ChargePoint_GetDisplaySettings_Handler,
		},
		{
			MethodName: "SetReaderSettings",
			Handler:    _ChargePoint_SetReaderSettings_Handler,
		},
		{
			MethodName: "GetReaderSettings",
			Handler:    _ChargePoint_GetReaderSettings_Handler,
		},
		{
			MethodName: "SetIndicatorSettings",
			Handler:    _ChargePoint_SetIndicatorSettings_Handler,
		},
		{
			MethodName: "GetIndicatorSettings",
			Handler:    _ChargePoint_GetIndicatorSettings_Handler,
		},
		{
			MethodName: "GetConnectionDetails",
			Handler:    _ChargePoint_GetConnectionDetails_Handler,
		},
		{
			MethodName: "ChangeConnectionDetails",
			Handler:    _ChargePoint_ChangeConnectionDetails_Handler,
		},
		{
			MethodName: "GetChargePointDetails",
			Handler:    _ChargePoint_GetChargePointDetails_Handler,
		},
		{
			MethodName: "ChangeChargePointDetails",
			Handler:    _ChargePoint_ChangeChargePointDetails_Handler,
		},
		{
			MethodName: "GetOCPPVariables",
			Handler:    _ChargePoint_GetOCPPVariables_Handler,
		},
		{
			MethodName: "SetOCPPVariables",
			Handler:    _ChargePoint_SetOCPPVariables_Handler,
		},
		{
			MethodName: "GetOCPPVariable",
			Handler:    _ChargePoint_GetOCPPVariable_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ChargePoint_GetVersion_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _ChargePoint_GetStatus_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _ChargePoint_Restart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
