// Code generated by mocktail; DO NOT EDIT.

package database

import (
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"github.com/xBlaz3kx/ChargePi-go/internal/users/pkg/models"
)

// databaseMock mock of Database.
type databaseMock struct{ mock.Mock }

// NewDatabaseMock creates a new databaseMock.
func NewDatabaseMock(tb testing.TB) *databaseMock {
	tb.Helper()

	m := &databaseMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *databaseMock) AddUser(user models.User) error {
	_ret := _m.Called(user)

	if _rf, ok := _ret.Get(0).(func(models.User) error); ok {
		return _rf(user)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *databaseMock) OnAddUser(user models.User) *databaseAddUserCall {
	return &databaseAddUserCall{Call: _m.Mock.On("AddUser", user), Parent: _m}
}

func (_m *databaseMock) OnAddUserRaw(user interface{}) *databaseAddUserCall {
	return &databaseAddUserCall{Call: _m.Mock.On("AddUser", user), Parent: _m}
}

type databaseAddUserCall struct {
	*mock.Call
	Parent *databaseMock
}

func (_c *databaseAddUserCall) Panic(msg string) *databaseAddUserCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *databaseAddUserCall) Once() *databaseAddUserCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *databaseAddUserCall) Twice() *databaseAddUserCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *databaseAddUserCall) Times(i int) *databaseAddUserCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *databaseAddUserCall) WaitUntil(w <-chan time.Time) *databaseAddUserCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *databaseAddUserCall) After(d time.Duration) *databaseAddUserCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *databaseAddUserCall) Run(fn func(args mock.Arguments)) *databaseAddUserCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *databaseAddUserCall) Maybe() *databaseAddUserCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *databaseAddUserCall) TypedReturns(a error) *databaseAddUserCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *databaseAddUserCall) ReturnsFn(fn func(models.User) error) *databaseAddUserCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *databaseAddUserCall) TypedRun(fn func(models.User)) *databaseAddUserCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_user, _ := args.Get(0).(models.User)
		fn(_user)
	})
	return _c
}

func (_c *databaseAddUserCall) OnAddUser(user models.User) *databaseAddUserCall {
	return _c.Parent.OnAddUser(user)
}

func (_c *databaseAddUserCall) OnDeleteUser(username string) *databaseDeleteUserCall {
	return _c.Parent.OnDeleteUser(username)
}

func (_c *databaseAddUserCall) OnGetUser(username string) *databaseGetUserCall {
	return _c.Parent.OnGetUser(username)
}

func (_c *databaseAddUserCall) OnGetUsers() *databaseGetUsersCall {
	return _c.Parent.OnGetUsers()
}

func (_c *databaseAddUserCall) OnUpdateUser(aParam models.User) *databaseUpdateUserCall {
	return _c.Parent.OnUpdateUser(aParam)
}

func (_c *databaseAddUserCall) OnAddUserRaw(user interface{}) *databaseAddUserCall {
	return _c.Parent.OnAddUserRaw(user)
}

func (_c *databaseAddUserCall) OnDeleteUserRaw(username interface{}) *databaseDeleteUserCall {
	return _c.Parent.OnDeleteUserRaw(username)
}

func (_c *databaseAddUserCall) OnGetUserRaw(username interface{}) *databaseGetUserCall {
	return _c.Parent.OnGetUserRaw(username)
}

func (_c *databaseAddUserCall) OnGetUsersRaw() *databaseGetUsersCall {
	return _c.Parent.OnGetUsersRaw()
}

func (_c *databaseAddUserCall) OnUpdateUserRaw(aParam interface{}) *databaseUpdateUserCall {
	return _c.Parent.OnUpdateUserRaw(aParam)
}

func (_m *databaseMock) DeleteUser(username string) error {
	_ret := _m.Called(username)

	if _rf, ok := _ret.Get(0).(func(string) error); ok {
		return _rf(username)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *databaseMock) OnDeleteUser(username string) *databaseDeleteUserCall {
	return &databaseDeleteUserCall{Call: _m.Mock.On("DeleteUser", username), Parent: _m}
}

func (_m *databaseMock) OnDeleteUserRaw(username interface{}) *databaseDeleteUserCall {
	return &databaseDeleteUserCall{Call: _m.Mock.On("DeleteUser", username), Parent: _m}
}

type databaseDeleteUserCall struct {
	*mock.Call
	Parent *databaseMock
}

func (_c *databaseDeleteUserCall) Panic(msg string) *databaseDeleteUserCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *databaseDeleteUserCall) Once() *databaseDeleteUserCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *databaseDeleteUserCall) Twice() *databaseDeleteUserCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *databaseDeleteUserCall) Times(i int) *databaseDeleteUserCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *databaseDeleteUserCall) WaitUntil(w <-chan time.Time) *databaseDeleteUserCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *databaseDeleteUserCall) After(d time.Duration) *databaseDeleteUserCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *databaseDeleteUserCall) Run(fn func(args mock.Arguments)) *databaseDeleteUserCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *databaseDeleteUserCall) Maybe() *databaseDeleteUserCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *databaseDeleteUserCall) TypedReturns(a error) *databaseDeleteUserCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *databaseDeleteUserCall) ReturnsFn(fn func(string) error) *databaseDeleteUserCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *databaseDeleteUserCall) TypedRun(fn func(string)) *databaseDeleteUserCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_username := args.String(0)
		fn(_username)
	})
	return _c
}

func (_c *databaseDeleteUserCall) OnAddUser(user models.User) *databaseAddUserCall {
	return _c.Parent.OnAddUser(user)
}

func (_c *databaseDeleteUserCall) OnDeleteUser(username string) *databaseDeleteUserCall {
	return _c.Parent.OnDeleteUser(username)
}

func (_c *databaseDeleteUserCall) OnGetUser(username string) *databaseGetUserCall {
	return _c.Parent.OnGetUser(username)
}

func (_c *databaseDeleteUserCall) OnGetUsers() *databaseGetUsersCall {
	return _c.Parent.OnGetUsers()
}

func (_c *databaseDeleteUserCall) OnUpdateUser(aParam models.User) *databaseUpdateUserCall {
	return _c.Parent.OnUpdateUser(aParam)
}

func (_c *databaseDeleteUserCall) OnAddUserRaw(user interface{}) *databaseAddUserCall {
	return _c.Parent.OnAddUserRaw(user)
}

func (_c *databaseDeleteUserCall) OnDeleteUserRaw(username interface{}) *databaseDeleteUserCall {
	return _c.Parent.OnDeleteUserRaw(username)
}

func (_c *databaseDeleteUserCall) OnGetUserRaw(username interface{}) *databaseGetUserCall {
	return _c.Parent.OnGetUserRaw(username)
}

func (_c *databaseDeleteUserCall) OnGetUsersRaw() *databaseGetUsersCall {
	return _c.Parent.OnGetUsersRaw()
}

func (_c *databaseDeleteUserCall) OnUpdateUserRaw(aParam interface{}) *databaseUpdateUserCall {
	return _c.Parent.OnUpdateUserRaw(aParam)
}

func (_m *databaseMock) GetUser(username string) (*models.User, error) {
	_ret := _m.Called(username)

	if _rf, ok := _ret.Get(0).(func(string) (*models.User, error)); ok {
		return _rf(username)
	}

	_ra0, _ := _ret.Get(0).(*models.User)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *databaseMock) OnGetUser(username string) *databaseGetUserCall {
	return &databaseGetUserCall{Call: _m.Mock.On("GetUser", username), Parent: _m}
}

func (_m *databaseMock) OnGetUserRaw(username interface{}) *databaseGetUserCall {
	return &databaseGetUserCall{Call: _m.Mock.On("GetUser", username), Parent: _m}
}

type databaseGetUserCall struct {
	*mock.Call
	Parent *databaseMock
}

func (_c *databaseGetUserCall) Panic(msg string) *databaseGetUserCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *databaseGetUserCall) Once() *databaseGetUserCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *databaseGetUserCall) Twice() *databaseGetUserCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *databaseGetUserCall) Times(i int) *databaseGetUserCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *databaseGetUserCall) WaitUntil(w <-chan time.Time) *databaseGetUserCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *databaseGetUserCall) After(d time.Duration) *databaseGetUserCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *databaseGetUserCall) Run(fn func(args mock.Arguments)) *databaseGetUserCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *databaseGetUserCall) Maybe() *databaseGetUserCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *databaseGetUserCall) TypedReturns(a *models.User, b error) *databaseGetUserCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *databaseGetUserCall) ReturnsFn(fn func(string) (*models.User, error)) *databaseGetUserCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *databaseGetUserCall) TypedRun(fn func(string)) *databaseGetUserCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_username := args.String(0)
		fn(_username)
	})
	return _c
}

func (_c *databaseGetUserCall) OnAddUser(user models.User) *databaseAddUserCall {
	return _c.Parent.OnAddUser(user)
}

func (_c *databaseGetUserCall) OnDeleteUser(username string) *databaseDeleteUserCall {
	return _c.Parent.OnDeleteUser(username)
}

func (_c *databaseGetUserCall) OnGetUser(username string) *databaseGetUserCall {
	return _c.Parent.OnGetUser(username)
}

func (_c *databaseGetUserCall) OnGetUsers() *databaseGetUsersCall {
	return _c.Parent.OnGetUsers()
}

func (_c *databaseGetUserCall) OnUpdateUser(aParam models.User) *databaseUpdateUserCall {
	return _c.Parent.OnUpdateUser(aParam)
}

func (_c *databaseGetUserCall) OnAddUserRaw(user interface{}) *databaseAddUserCall {
	return _c.Parent.OnAddUserRaw(user)
}

func (_c *databaseGetUserCall) OnDeleteUserRaw(username interface{}) *databaseDeleteUserCall {
	return _c.Parent.OnDeleteUserRaw(username)
}

func (_c *databaseGetUserCall) OnGetUserRaw(username interface{}) *databaseGetUserCall {
	return _c.Parent.OnGetUserRaw(username)
}

func (_c *databaseGetUserCall) OnGetUsersRaw() *databaseGetUsersCall {
	return _c.Parent.OnGetUsersRaw()
}

func (_c *databaseGetUserCall) OnUpdateUserRaw(aParam interface{}) *databaseUpdateUserCall {
	return _c.Parent.OnUpdateUserRaw(aParam)
}

func (_m *databaseMock) GetUsers() []models.User {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() []models.User); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).([]models.User)

	return _ra0
}

func (_m *databaseMock) OnGetUsers() *databaseGetUsersCall {
	return &databaseGetUsersCall{Call: _m.Mock.On("GetUsers"), Parent: _m}
}

func (_m *databaseMock) OnGetUsersRaw() *databaseGetUsersCall {
	return &databaseGetUsersCall{Call: _m.Mock.On("GetUsers"), Parent: _m}
}

type databaseGetUsersCall struct {
	*mock.Call
	Parent *databaseMock
}

func (_c *databaseGetUsersCall) Panic(msg string) *databaseGetUsersCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *databaseGetUsersCall) Once() *databaseGetUsersCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *databaseGetUsersCall) Twice() *databaseGetUsersCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *databaseGetUsersCall) Times(i int) *databaseGetUsersCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *databaseGetUsersCall) WaitUntil(w <-chan time.Time) *databaseGetUsersCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *databaseGetUsersCall) After(d time.Duration) *databaseGetUsersCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *databaseGetUsersCall) Run(fn func(args mock.Arguments)) *databaseGetUsersCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *databaseGetUsersCall) Maybe() *databaseGetUsersCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *databaseGetUsersCall) TypedReturns(a []models.User) *databaseGetUsersCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *databaseGetUsersCall) ReturnsFn(fn func() []models.User) *databaseGetUsersCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *databaseGetUsersCall) TypedRun(fn func()) *databaseGetUsersCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *databaseGetUsersCall) OnAddUser(user models.User) *databaseAddUserCall {
	return _c.Parent.OnAddUser(user)
}

func (_c *databaseGetUsersCall) OnDeleteUser(username string) *databaseDeleteUserCall {
	return _c.Parent.OnDeleteUser(username)
}

func (_c *databaseGetUsersCall) OnGetUser(username string) *databaseGetUserCall {
	return _c.Parent.OnGetUser(username)
}

func (_c *databaseGetUsersCall) OnGetUsers() *databaseGetUsersCall {
	return _c.Parent.OnGetUsers()
}

func (_c *databaseGetUsersCall) OnUpdateUser(aParam models.User) *databaseUpdateUserCall {
	return _c.Parent.OnUpdateUser(aParam)
}

func (_c *databaseGetUsersCall) OnAddUserRaw(user interface{}) *databaseAddUserCall {
	return _c.Parent.OnAddUserRaw(user)
}

func (_c *databaseGetUsersCall) OnDeleteUserRaw(username interface{}) *databaseDeleteUserCall {
	return _c.Parent.OnDeleteUserRaw(username)
}

func (_c *databaseGetUsersCall) OnGetUserRaw(username interface{}) *databaseGetUserCall {
	return _c.Parent.OnGetUserRaw(username)
}

func (_c *databaseGetUsersCall) OnGetUsersRaw() *databaseGetUsersCall {
	return _c.Parent.OnGetUsersRaw()
}

func (_c *databaseGetUsersCall) OnUpdateUserRaw(aParam interface{}) *databaseUpdateUserCall {
	return _c.Parent.OnUpdateUserRaw(aParam)
}

func (_m *databaseMock) UpdateUser(aParam models.User) (*models.User, error) {
	_ret := _m.Called(aParam)

	if _rf, ok := _ret.Get(0).(func(models.User) (*models.User, error)); ok {
		return _rf(aParam)
	}

	_ra0, _ := _ret.Get(0).(*models.User)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *databaseMock) OnUpdateUser(aParam models.User) *databaseUpdateUserCall {
	return &databaseUpdateUserCall{Call: _m.Mock.On("UpdateUser", aParam), Parent: _m}
}

func (_m *databaseMock) OnUpdateUserRaw(aParam interface{}) *databaseUpdateUserCall {
	return &databaseUpdateUserCall{Call: _m.Mock.On("UpdateUser", aParam), Parent: _m}
}

type databaseUpdateUserCall struct {
	*mock.Call
	Parent *databaseMock
}

func (_c *databaseUpdateUserCall) Panic(msg string) *databaseUpdateUserCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *databaseUpdateUserCall) Once() *databaseUpdateUserCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *databaseUpdateUserCall) Twice() *databaseUpdateUserCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *databaseUpdateUserCall) Times(i int) *databaseUpdateUserCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *databaseUpdateUserCall) WaitUntil(w <-chan time.Time) *databaseUpdateUserCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *databaseUpdateUserCall) After(d time.Duration) *databaseUpdateUserCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *databaseUpdateUserCall) Run(fn func(args mock.Arguments)) *databaseUpdateUserCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *databaseUpdateUserCall) Maybe() *databaseUpdateUserCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *databaseUpdateUserCall) TypedReturns(a *models.User, b error) *databaseUpdateUserCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *databaseUpdateUserCall) ReturnsFn(fn func(models.User) (*models.User, error)) *databaseUpdateUserCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *databaseUpdateUserCall) TypedRun(fn func(models.User)) *databaseUpdateUserCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_aParam, _ := args.Get(0).(models.User)
		fn(_aParam)
	})
	return _c
}

func (_c *databaseUpdateUserCall) OnAddUser(user models.User) *databaseAddUserCall {
	return _c.Parent.OnAddUser(user)
}

func (_c *databaseUpdateUserCall) OnDeleteUser(username string) *databaseDeleteUserCall {
	return _c.Parent.OnDeleteUser(username)
}

func (_c *databaseUpdateUserCall) OnGetUser(username string) *databaseGetUserCall {
	return _c.Parent.OnGetUser(username)
}

func (_c *databaseUpdateUserCall) OnGetUsers() *databaseGetUsersCall {
	return _c.Parent.OnGetUsers()
}

func (_c *databaseUpdateUserCall) OnUpdateUser(aParam models.User) *databaseUpdateUserCall {
	return _c.Parent.OnUpdateUser(aParam)
}

func (_c *databaseUpdateUserCall) OnAddUserRaw(user interface{}) *databaseAddUserCall {
	return _c.Parent.OnAddUserRaw(user)
}

func (_c *databaseUpdateUserCall) OnDeleteUserRaw(username interface{}) *databaseDeleteUserCall {
	return _c.Parent.OnDeleteUserRaw(username)
}

func (_c *databaseUpdateUserCall) OnGetUserRaw(username interface{}) *databaseGetUserCall {
	return _c.Parent.OnGetUserRaw(username)
}

func (_c *databaseUpdateUserCall) OnGetUsersRaw() *databaseGetUsersCall {
	return _c.Parent.OnGetUsersRaw()
}

func (_c *databaseUpdateUserCall) OnUpdateUserRaw(aParam interface{}) *databaseUpdateUserCall {
	return _c.Parent.OnUpdateUserRaw(aParam)
}
