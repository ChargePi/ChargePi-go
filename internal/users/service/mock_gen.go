// Code generated by mocktail; DO NOT EDIT.

package service

import (
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"github.com/xBlaz3kx/ChargePi-go/internal/users/pkg/models"
)

// serviceMock mock of Service.
type serviceMock struct{ mock.Mock }

// NewServiceMock creates a new serviceMock.
func NewServiceMock(tb testing.TB) *serviceMock {
	tb.Helper()

	m := &serviceMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *serviceMock) AddUser(username string, password string, role string) error {
	_ret := _m.Called(username, password, role)

	if _rf, ok := _ret.Get(0).(func(string, string, string) error); ok {
		return _rf(username, password, role)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *serviceMock) OnAddUser(username string, password string, role string) *serviceAddUserCall {
	return &serviceAddUserCall{Call: _m.Mock.On("AddUser", username, password, role), Parent: _m}
}

func (_m *serviceMock) OnAddUserRaw(username interface{}, password interface{}, role interface{}) *serviceAddUserCall {
	return &serviceAddUserCall{Call: _m.Mock.On("AddUser", username, password, role), Parent: _m}
}

type serviceAddUserCall struct {
	*mock.Call
	Parent *serviceMock
}

func (_c *serviceAddUserCall) Panic(msg string) *serviceAddUserCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *serviceAddUserCall) Once() *serviceAddUserCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *serviceAddUserCall) Twice() *serviceAddUserCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *serviceAddUserCall) Times(i int) *serviceAddUserCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *serviceAddUserCall) WaitUntil(w <-chan time.Time) *serviceAddUserCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *serviceAddUserCall) After(d time.Duration) *serviceAddUserCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *serviceAddUserCall) Run(fn func(args mock.Arguments)) *serviceAddUserCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *serviceAddUserCall) Maybe() *serviceAddUserCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *serviceAddUserCall) TypedReturns(a error) *serviceAddUserCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *serviceAddUserCall) ReturnsFn(fn func(string, string, string) error) *serviceAddUserCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *serviceAddUserCall) TypedRun(fn func(string, string, string)) *serviceAddUserCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_username := args.String(0)
		_password := args.String(1)
		_role := args.String(2)
		fn(_username, _password, _role)
	})
	return _c
}

func (_c *serviceAddUserCall) OnAddUser(username string, password string, role string) *serviceAddUserCall {
	return _c.Parent.OnAddUser(username, password, role)
}

func (_c *serviceAddUserCall) OnCheckPassword(username string, password string) *serviceCheckPasswordCall {
	return _c.Parent.OnCheckPassword(username, password)
}

func (_c *serviceAddUserCall) OnDeleteUser(username string) *serviceDeleteUserCall {
	return _c.Parent.OnDeleteUser(username)
}

func (_c *serviceAddUserCall) OnGetUser(username string) *serviceGetUserCall {
	return _c.Parent.OnGetUser(username)
}

func (_c *serviceAddUserCall) OnGetUsers() *serviceGetUsersCall {
	return _c.Parent.OnGetUsers()
}

func (_c *serviceAddUserCall) OnUpdateUser(username string, password *string, role *string) *serviceUpdateUserCall {
	return _c.Parent.OnUpdateUser(username, password, role)
}

func (_c *serviceAddUserCall) OnAddUserRaw(username interface{}, password interface{}, role interface{}) *serviceAddUserCall {
	return _c.Parent.OnAddUserRaw(username, password, role)
}

func (_c *serviceAddUserCall) OnCheckPasswordRaw(username interface{}, password interface{}) *serviceCheckPasswordCall {
	return _c.Parent.OnCheckPasswordRaw(username, password)
}

func (_c *serviceAddUserCall) OnDeleteUserRaw(username interface{}) *serviceDeleteUserCall {
	return _c.Parent.OnDeleteUserRaw(username)
}

func (_c *serviceAddUserCall) OnGetUserRaw(username interface{}) *serviceGetUserCall {
	return _c.Parent.OnGetUserRaw(username)
}

func (_c *serviceAddUserCall) OnGetUsersRaw() *serviceGetUsersCall {
	return _c.Parent.OnGetUsersRaw()
}

func (_c *serviceAddUserCall) OnUpdateUserRaw(username interface{}, password interface{}, role interface{}) *serviceUpdateUserCall {
	return _c.Parent.OnUpdateUserRaw(username, password, role)
}

func (_m *serviceMock) CheckPassword(username string, password string) bool {
	_ret := _m.Called(username, password)

	if _rf, ok := _ret.Get(0).(func(string, string) bool); ok {
		return _rf(username, password)
	}

	_ra0 := _ret.Bool(0)

	return _ra0
}

func (_m *serviceMock) OnCheckPassword(username string, password string) *serviceCheckPasswordCall {
	return &serviceCheckPasswordCall{Call: _m.Mock.On("CheckPassword", username, password), Parent: _m}
}

func (_m *serviceMock) OnCheckPasswordRaw(username interface{}, password interface{}) *serviceCheckPasswordCall {
	return &serviceCheckPasswordCall{Call: _m.Mock.On("CheckPassword", username, password), Parent: _m}
}

type serviceCheckPasswordCall struct {
	*mock.Call
	Parent *serviceMock
}

func (_c *serviceCheckPasswordCall) Panic(msg string) *serviceCheckPasswordCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *serviceCheckPasswordCall) Once() *serviceCheckPasswordCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *serviceCheckPasswordCall) Twice() *serviceCheckPasswordCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *serviceCheckPasswordCall) Times(i int) *serviceCheckPasswordCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *serviceCheckPasswordCall) WaitUntil(w <-chan time.Time) *serviceCheckPasswordCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *serviceCheckPasswordCall) After(d time.Duration) *serviceCheckPasswordCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *serviceCheckPasswordCall) Run(fn func(args mock.Arguments)) *serviceCheckPasswordCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *serviceCheckPasswordCall) Maybe() *serviceCheckPasswordCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *serviceCheckPasswordCall) TypedReturns(a bool) *serviceCheckPasswordCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *serviceCheckPasswordCall) ReturnsFn(fn func(string, string) bool) *serviceCheckPasswordCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *serviceCheckPasswordCall) TypedRun(fn func(string, string)) *serviceCheckPasswordCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_username := args.String(0)
		_password := args.String(1)
		fn(_username, _password)
	})
	return _c
}

func (_c *serviceCheckPasswordCall) OnAddUser(username string, password string, role string) *serviceAddUserCall {
	return _c.Parent.OnAddUser(username, password, role)
}

func (_c *serviceCheckPasswordCall) OnCheckPassword(username string, password string) *serviceCheckPasswordCall {
	return _c.Parent.OnCheckPassword(username, password)
}

func (_c *serviceCheckPasswordCall) OnDeleteUser(username string) *serviceDeleteUserCall {
	return _c.Parent.OnDeleteUser(username)
}

func (_c *serviceCheckPasswordCall) OnGetUser(username string) *serviceGetUserCall {
	return _c.Parent.OnGetUser(username)
}

func (_c *serviceCheckPasswordCall) OnGetUsers() *serviceGetUsersCall {
	return _c.Parent.OnGetUsers()
}

func (_c *serviceCheckPasswordCall) OnUpdateUser(username string, password *string, role *string) *serviceUpdateUserCall {
	return _c.Parent.OnUpdateUser(username, password, role)
}

func (_c *serviceCheckPasswordCall) OnAddUserRaw(username interface{}, password interface{}, role interface{}) *serviceAddUserCall {
	return _c.Parent.OnAddUserRaw(username, password, role)
}

func (_c *serviceCheckPasswordCall) OnCheckPasswordRaw(username interface{}, password interface{}) *serviceCheckPasswordCall {
	return _c.Parent.OnCheckPasswordRaw(username, password)
}

func (_c *serviceCheckPasswordCall) OnDeleteUserRaw(username interface{}) *serviceDeleteUserCall {
	return _c.Parent.OnDeleteUserRaw(username)
}

func (_c *serviceCheckPasswordCall) OnGetUserRaw(username interface{}) *serviceGetUserCall {
	return _c.Parent.OnGetUserRaw(username)
}

func (_c *serviceCheckPasswordCall) OnGetUsersRaw() *serviceGetUsersCall {
	return _c.Parent.OnGetUsersRaw()
}

func (_c *serviceCheckPasswordCall) OnUpdateUserRaw(username interface{}, password interface{}, role interface{}) *serviceUpdateUserCall {
	return _c.Parent.OnUpdateUserRaw(username, password, role)
}

func (_m *serviceMock) DeleteUser(username string) error {
	_ret := _m.Called(username)

	if _rf, ok := _ret.Get(0).(func(string) error); ok {
		return _rf(username)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *serviceMock) OnDeleteUser(username string) *serviceDeleteUserCall {
	return &serviceDeleteUserCall{Call: _m.Mock.On("DeleteUser", username), Parent: _m}
}

func (_m *serviceMock) OnDeleteUserRaw(username interface{}) *serviceDeleteUserCall {
	return &serviceDeleteUserCall{Call: _m.Mock.On("DeleteUser", username), Parent: _m}
}

type serviceDeleteUserCall struct {
	*mock.Call
	Parent *serviceMock
}

func (_c *serviceDeleteUserCall) Panic(msg string) *serviceDeleteUserCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *serviceDeleteUserCall) Once() *serviceDeleteUserCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *serviceDeleteUserCall) Twice() *serviceDeleteUserCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *serviceDeleteUserCall) Times(i int) *serviceDeleteUserCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *serviceDeleteUserCall) WaitUntil(w <-chan time.Time) *serviceDeleteUserCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *serviceDeleteUserCall) After(d time.Duration) *serviceDeleteUserCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *serviceDeleteUserCall) Run(fn func(args mock.Arguments)) *serviceDeleteUserCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *serviceDeleteUserCall) Maybe() *serviceDeleteUserCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *serviceDeleteUserCall) TypedReturns(a error) *serviceDeleteUserCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *serviceDeleteUserCall) ReturnsFn(fn func(string) error) *serviceDeleteUserCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *serviceDeleteUserCall) TypedRun(fn func(string)) *serviceDeleteUserCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_username := args.String(0)
		fn(_username)
	})
	return _c
}

func (_c *serviceDeleteUserCall) OnAddUser(username string, password string, role string) *serviceAddUserCall {
	return _c.Parent.OnAddUser(username, password, role)
}

func (_c *serviceDeleteUserCall) OnCheckPassword(username string, password string) *serviceCheckPasswordCall {
	return _c.Parent.OnCheckPassword(username, password)
}

func (_c *serviceDeleteUserCall) OnDeleteUser(username string) *serviceDeleteUserCall {
	return _c.Parent.OnDeleteUser(username)
}

func (_c *serviceDeleteUserCall) OnGetUser(username string) *serviceGetUserCall {
	return _c.Parent.OnGetUser(username)
}

func (_c *serviceDeleteUserCall) OnGetUsers() *serviceGetUsersCall {
	return _c.Parent.OnGetUsers()
}

func (_c *serviceDeleteUserCall) OnUpdateUser(username string, password *string, role *string) *serviceUpdateUserCall {
	return _c.Parent.OnUpdateUser(username, password, role)
}

func (_c *serviceDeleteUserCall) OnAddUserRaw(username interface{}, password interface{}, role interface{}) *serviceAddUserCall {
	return _c.Parent.OnAddUserRaw(username, password, role)
}

func (_c *serviceDeleteUserCall) OnCheckPasswordRaw(username interface{}, password interface{}) *serviceCheckPasswordCall {
	return _c.Parent.OnCheckPasswordRaw(username, password)
}

func (_c *serviceDeleteUserCall) OnDeleteUserRaw(username interface{}) *serviceDeleteUserCall {
	return _c.Parent.OnDeleteUserRaw(username)
}

func (_c *serviceDeleteUserCall) OnGetUserRaw(username interface{}) *serviceGetUserCall {
	return _c.Parent.OnGetUserRaw(username)
}

func (_c *serviceDeleteUserCall) OnGetUsersRaw() *serviceGetUsersCall {
	return _c.Parent.OnGetUsersRaw()
}

func (_c *serviceDeleteUserCall) OnUpdateUserRaw(username interface{}, password interface{}, role interface{}) *serviceUpdateUserCall {
	return _c.Parent.OnUpdateUserRaw(username, password, role)
}

func (_m *serviceMock) GetUser(username string) (*models.User, error) {
	_ret := _m.Called(username)

	if _rf, ok := _ret.Get(0).(func(string) (*models.User, error)); ok {
		return _rf(username)
	}

	_ra0, _ := _ret.Get(0).(*models.User)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *serviceMock) OnGetUser(username string) *serviceGetUserCall {
	return &serviceGetUserCall{Call: _m.Mock.On("GetUser", username), Parent: _m}
}

func (_m *serviceMock) OnGetUserRaw(username interface{}) *serviceGetUserCall {
	return &serviceGetUserCall{Call: _m.Mock.On("GetUser", username), Parent: _m}
}

type serviceGetUserCall struct {
	*mock.Call
	Parent *serviceMock
}

func (_c *serviceGetUserCall) Panic(msg string) *serviceGetUserCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *serviceGetUserCall) Once() *serviceGetUserCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *serviceGetUserCall) Twice() *serviceGetUserCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *serviceGetUserCall) Times(i int) *serviceGetUserCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *serviceGetUserCall) WaitUntil(w <-chan time.Time) *serviceGetUserCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *serviceGetUserCall) After(d time.Duration) *serviceGetUserCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *serviceGetUserCall) Run(fn func(args mock.Arguments)) *serviceGetUserCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *serviceGetUserCall) Maybe() *serviceGetUserCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *serviceGetUserCall) TypedReturns(a *models.User, b error) *serviceGetUserCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *serviceGetUserCall) ReturnsFn(fn func(string) (*models.User, error)) *serviceGetUserCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *serviceGetUserCall) TypedRun(fn func(string)) *serviceGetUserCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_username := args.String(0)
		fn(_username)
	})
	return _c
}

func (_c *serviceGetUserCall) OnAddUser(username string, password string, role string) *serviceAddUserCall {
	return _c.Parent.OnAddUser(username, password, role)
}

func (_c *serviceGetUserCall) OnCheckPassword(username string, password string) *serviceCheckPasswordCall {
	return _c.Parent.OnCheckPassword(username, password)
}

func (_c *serviceGetUserCall) OnDeleteUser(username string) *serviceDeleteUserCall {
	return _c.Parent.OnDeleteUser(username)
}

func (_c *serviceGetUserCall) OnGetUser(username string) *serviceGetUserCall {
	return _c.Parent.OnGetUser(username)
}

func (_c *serviceGetUserCall) OnGetUsers() *serviceGetUsersCall {
	return _c.Parent.OnGetUsers()
}

func (_c *serviceGetUserCall) OnUpdateUser(username string, password *string, role *string) *serviceUpdateUserCall {
	return _c.Parent.OnUpdateUser(username, password, role)
}

func (_c *serviceGetUserCall) OnAddUserRaw(username interface{}, password interface{}, role interface{}) *serviceAddUserCall {
	return _c.Parent.OnAddUserRaw(username, password, role)
}

func (_c *serviceGetUserCall) OnCheckPasswordRaw(username interface{}, password interface{}) *serviceCheckPasswordCall {
	return _c.Parent.OnCheckPasswordRaw(username, password)
}

func (_c *serviceGetUserCall) OnDeleteUserRaw(username interface{}) *serviceDeleteUserCall {
	return _c.Parent.OnDeleteUserRaw(username)
}

func (_c *serviceGetUserCall) OnGetUserRaw(username interface{}) *serviceGetUserCall {
	return _c.Parent.OnGetUserRaw(username)
}

func (_c *serviceGetUserCall) OnGetUsersRaw() *serviceGetUsersCall {
	return _c.Parent.OnGetUsersRaw()
}

func (_c *serviceGetUserCall) OnUpdateUserRaw(username interface{}, password interface{}, role interface{}) *serviceUpdateUserCall {
	return _c.Parent.OnUpdateUserRaw(username, password, role)
}

func (_m *serviceMock) GetUsers() ([]models.User, error) {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() ([]models.User, error)); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).([]models.User)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *serviceMock) OnGetUsers() *serviceGetUsersCall {
	return &serviceGetUsersCall{Call: _m.Mock.On("GetUsers"), Parent: _m}
}

func (_m *serviceMock) OnGetUsersRaw() *serviceGetUsersCall {
	return &serviceGetUsersCall{Call: _m.Mock.On("GetUsers"), Parent: _m}
}

type serviceGetUsersCall struct {
	*mock.Call
	Parent *serviceMock
}

func (_c *serviceGetUsersCall) Panic(msg string) *serviceGetUsersCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *serviceGetUsersCall) Once() *serviceGetUsersCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *serviceGetUsersCall) Twice() *serviceGetUsersCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *serviceGetUsersCall) Times(i int) *serviceGetUsersCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *serviceGetUsersCall) WaitUntil(w <-chan time.Time) *serviceGetUsersCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *serviceGetUsersCall) After(d time.Duration) *serviceGetUsersCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *serviceGetUsersCall) Run(fn func(args mock.Arguments)) *serviceGetUsersCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *serviceGetUsersCall) Maybe() *serviceGetUsersCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *serviceGetUsersCall) TypedReturns(a []models.User, b error) *serviceGetUsersCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *serviceGetUsersCall) ReturnsFn(fn func() ([]models.User, error)) *serviceGetUsersCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *serviceGetUsersCall) TypedRun(fn func()) *serviceGetUsersCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *serviceGetUsersCall) OnAddUser(username string, password string, role string) *serviceAddUserCall {
	return _c.Parent.OnAddUser(username, password, role)
}

func (_c *serviceGetUsersCall) OnCheckPassword(username string, password string) *serviceCheckPasswordCall {
	return _c.Parent.OnCheckPassword(username, password)
}

func (_c *serviceGetUsersCall) OnDeleteUser(username string) *serviceDeleteUserCall {
	return _c.Parent.OnDeleteUser(username)
}

func (_c *serviceGetUsersCall) OnGetUser(username string) *serviceGetUserCall {
	return _c.Parent.OnGetUser(username)
}

func (_c *serviceGetUsersCall) OnGetUsers() *serviceGetUsersCall {
	return _c.Parent.OnGetUsers()
}

func (_c *serviceGetUsersCall) OnUpdateUser(username string, password *string, role *string) *serviceUpdateUserCall {
	return _c.Parent.OnUpdateUser(username, password, role)
}

func (_c *serviceGetUsersCall) OnAddUserRaw(username interface{}, password interface{}, role interface{}) *serviceAddUserCall {
	return _c.Parent.OnAddUserRaw(username, password, role)
}

func (_c *serviceGetUsersCall) OnCheckPasswordRaw(username interface{}, password interface{}) *serviceCheckPasswordCall {
	return _c.Parent.OnCheckPasswordRaw(username, password)
}

func (_c *serviceGetUsersCall) OnDeleteUserRaw(username interface{}) *serviceDeleteUserCall {
	return _c.Parent.OnDeleteUserRaw(username)
}

func (_c *serviceGetUsersCall) OnGetUserRaw(username interface{}) *serviceGetUserCall {
	return _c.Parent.OnGetUserRaw(username)
}

func (_c *serviceGetUsersCall) OnGetUsersRaw() *serviceGetUsersCall {
	return _c.Parent.OnGetUsersRaw()
}

func (_c *serviceGetUsersCall) OnUpdateUserRaw(username interface{}, password interface{}, role interface{}) *serviceUpdateUserCall {
	return _c.Parent.OnUpdateUserRaw(username, password, role)
}

func (_m *serviceMock) UpdateUser(username string, password *string, role *string) (*models.User, error) {
	_ret := _m.Called(username, password, role)

	if _rf, ok := _ret.Get(0).(func(string, *string, *string) (*models.User, error)); ok {
		return _rf(username, password, role)
	}

	_ra0, _ := _ret.Get(0).(*models.User)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *serviceMock) OnUpdateUser(username string, password *string, role *string) *serviceUpdateUserCall {
	return &serviceUpdateUserCall{Call: _m.Mock.On("UpdateUser", username, password, role), Parent: _m}
}

func (_m *serviceMock) OnUpdateUserRaw(username interface{}, password interface{}, role interface{}) *serviceUpdateUserCall {
	return &serviceUpdateUserCall{Call: _m.Mock.On("UpdateUser", username, password, role), Parent: _m}
}

type serviceUpdateUserCall struct {
	*mock.Call
	Parent *serviceMock
}

func (_c *serviceUpdateUserCall) Panic(msg string) *serviceUpdateUserCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *serviceUpdateUserCall) Once() *serviceUpdateUserCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *serviceUpdateUserCall) Twice() *serviceUpdateUserCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *serviceUpdateUserCall) Times(i int) *serviceUpdateUserCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *serviceUpdateUserCall) WaitUntil(w <-chan time.Time) *serviceUpdateUserCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *serviceUpdateUserCall) After(d time.Duration) *serviceUpdateUserCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *serviceUpdateUserCall) Run(fn func(args mock.Arguments)) *serviceUpdateUserCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *serviceUpdateUserCall) Maybe() *serviceUpdateUserCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *serviceUpdateUserCall) TypedReturns(a *models.User, b error) *serviceUpdateUserCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *serviceUpdateUserCall) ReturnsFn(fn func(string, *string, *string) (*models.User, error)) *serviceUpdateUserCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *serviceUpdateUserCall) TypedRun(fn func(string, *string, *string)) *serviceUpdateUserCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_username := args.String(0)
		_password, _ := args.Get(1).(*string)
		_role, _ := args.Get(2).(*string)
		fn(_username, _password, _role)
	})
	return _c
}

func (_c *serviceUpdateUserCall) OnAddUser(username string, password string, role string) *serviceAddUserCall {
	return _c.Parent.OnAddUser(username, password, role)
}

func (_c *serviceUpdateUserCall) OnCheckPassword(username string, password string) *serviceCheckPasswordCall {
	return _c.Parent.OnCheckPassword(username, password)
}

func (_c *serviceUpdateUserCall) OnDeleteUser(username string) *serviceDeleteUserCall {
	return _c.Parent.OnDeleteUser(username)
}

func (_c *serviceUpdateUserCall) OnGetUser(username string) *serviceGetUserCall {
	return _c.Parent.OnGetUser(username)
}

func (_c *serviceUpdateUserCall) OnGetUsers() *serviceGetUsersCall {
	return _c.Parent.OnGetUsers()
}

func (_c *serviceUpdateUserCall) OnUpdateUser(username string, password *string, role *string) *serviceUpdateUserCall {
	return _c.Parent.OnUpdateUser(username, password, role)
}

func (_c *serviceUpdateUserCall) OnAddUserRaw(username interface{}, password interface{}, role interface{}) *serviceAddUserCall {
	return _c.Parent.OnAddUserRaw(username, password, role)
}

func (_c *serviceUpdateUserCall) OnCheckPasswordRaw(username interface{}, password interface{}) *serviceCheckPasswordCall {
	return _c.Parent.OnCheckPasswordRaw(username, password)
}

func (_c *serviceUpdateUserCall) OnDeleteUserRaw(username interface{}) *serviceDeleteUserCall {
	return _c.Parent.OnDeleteUserRaw(username)
}

func (_c *serviceUpdateUserCall) OnGetUserRaw(username interface{}) *serviceGetUserCall {
	return _c.Parent.OnGetUserRaw(username)
}

func (_c *serviceUpdateUserCall) OnGetUsersRaw() *serviceGetUsersCall {
	return _c.Parent.OnGetUsersRaw()
}

func (_c *serviceUpdateUserCall) OnUpdateUserRaw(username interface{}, password interface{}, role interface{}) *serviceUpdateUserCall {
	return _c.Parent.OnUpdateUserRaw(username, password, role)
}
