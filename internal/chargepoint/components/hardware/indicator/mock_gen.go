// Code generated by mocktail; DO NOT EDIT.

package indicator

import (
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// indicatorMock mock of Indicator.
type indicatorMock struct{ mock.Mock }

// NewIndicatorMock creates a new indicatorMock.
func NewIndicatorMock(tb testing.TB) *indicatorMock {
	tb.Helper()

	m := &indicatorMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *indicatorMock) Blink(index int, times int, color Color) error {
	_ret := _m.Called(index, times, color)

	if _rf, ok := _ret.Get(0).(func(int, int, Color) error); ok {
		return _rf(index, times, color)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *indicatorMock) OnBlink(index int, times int, color Color) *indicatorBlinkCall {
	return &indicatorBlinkCall{Call: _m.Mock.On("Blink", index, times, color), Parent: _m}
}

func (_m *indicatorMock) OnBlinkRaw(index interface{}, times interface{}, color interface{}) *indicatorBlinkCall {
	return &indicatorBlinkCall{Call: _m.Mock.On("Blink", index, times, color), Parent: _m}
}

type indicatorBlinkCall struct {
	*mock.Call
	Parent *indicatorMock
}

func (_c *indicatorBlinkCall) Panic(msg string) *indicatorBlinkCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *indicatorBlinkCall) Once() *indicatorBlinkCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *indicatorBlinkCall) Twice() *indicatorBlinkCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *indicatorBlinkCall) Times(i int) *indicatorBlinkCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *indicatorBlinkCall) WaitUntil(w <-chan time.Time) *indicatorBlinkCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *indicatorBlinkCall) After(d time.Duration) *indicatorBlinkCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *indicatorBlinkCall) Run(fn func(args mock.Arguments)) *indicatorBlinkCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *indicatorBlinkCall) Maybe() *indicatorBlinkCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *indicatorBlinkCall) TypedReturns(a error) *indicatorBlinkCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *indicatorBlinkCall) ReturnsFn(fn func(int, int, Color) error) *indicatorBlinkCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *indicatorBlinkCall) TypedRun(fn func(int, int, Color)) *indicatorBlinkCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_index := args.Int(0)
		_times := args.Int(1)
		_color, _ := args.Get(2).(Color)
		fn(_index, _times, _color)
	})
	return _c
}

func (_c *indicatorBlinkCall) OnBlink(index int, times int, color Color) *indicatorBlinkCall {
	return _c.Parent.OnBlink(index, times, color)
}

func (_c *indicatorBlinkCall) OnCleanup() *indicatorCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *indicatorBlinkCall) OnDisplayColor(index int, color Color) *indicatorDisplayColorCall {
	return _c.Parent.OnDisplayColor(index, color)
}

func (_c *indicatorBlinkCall) OnGetType() *indicatorGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *indicatorBlinkCall) OnBlinkRaw(index interface{}, times interface{}, color interface{}) *indicatorBlinkCall {
	return _c.Parent.OnBlinkRaw(index, times, color)
}

func (_c *indicatorBlinkCall) OnCleanupRaw() *indicatorCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *indicatorBlinkCall) OnDisplayColorRaw(index interface{}, color interface{}) *indicatorDisplayColorCall {
	return _c.Parent.OnDisplayColorRaw(index, color)
}

func (_c *indicatorBlinkCall) OnGetTypeRaw() *indicatorGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_m *indicatorMock) Cleanup() {
	_m.Called()
}

func (_m *indicatorMock) OnCleanup() *indicatorCleanupCall {
	return &indicatorCleanupCall{Call: _m.Mock.On("Cleanup"), Parent: _m}
}

func (_m *indicatorMock) OnCleanupRaw() *indicatorCleanupCall {
	return &indicatorCleanupCall{Call: _m.Mock.On("Cleanup"), Parent: _m}
}

type indicatorCleanupCall struct {
	*mock.Call
	Parent *indicatorMock
}

func (_c *indicatorCleanupCall) Panic(msg string) *indicatorCleanupCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *indicatorCleanupCall) Once() *indicatorCleanupCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *indicatorCleanupCall) Twice() *indicatorCleanupCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *indicatorCleanupCall) Times(i int) *indicatorCleanupCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *indicatorCleanupCall) WaitUntil(w <-chan time.Time) *indicatorCleanupCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *indicatorCleanupCall) After(d time.Duration) *indicatorCleanupCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *indicatorCleanupCall) Run(fn func(args mock.Arguments)) *indicatorCleanupCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *indicatorCleanupCall) Maybe() *indicatorCleanupCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *indicatorCleanupCall) TypedRun(fn func()) *indicatorCleanupCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *indicatorCleanupCall) OnBlink(index int, times int, color Color) *indicatorBlinkCall {
	return _c.Parent.OnBlink(index, times, color)
}

func (_c *indicatorCleanupCall) OnCleanup() *indicatorCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *indicatorCleanupCall) OnDisplayColor(index int, color Color) *indicatorDisplayColorCall {
	return _c.Parent.OnDisplayColor(index, color)
}

func (_c *indicatorCleanupCall) OnGetType() *indicatorGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *indicatorCleanupCall) OnBlinkRaw(index interface{}, times interface{}, color interface{}) *indicatorBlinkCall {
	return _c.Parent.OnBlinkRaw(index, times, color)
}

func (_c *indicatorCleanupCall) OnCleanupRaw() *indicatorCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *indicatorCleanupCall) OnDisplayColorRaw(index interface{}, color interface{}) *indicatorDisplayColorCall {
	return _c.Parent.OnDisplayColorRaw(index, color)
}

func (_c *indicatorCleanupCall) OnGetTypeRaw() *indicatorGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_m *indicatorMock) DisplayColor(index int, color Color) error {
	_ret := _m.Called(index, color)

	if _rf, ok := _ret.Get(0).(func(int, Color) error); ok {
		return _rf(index, color)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *indicatorMock) OnDisplayColor(index int, color Color) *indicatorDisplayColorCall {
	return &indicatorDisplayColorCall{Call: _m.Mock.On("DisplayColor", index, color), Parent: _m}
}

func (_m *indicatorMock) OnDisplayColorRaw(index interface{}, color interface{}) *indicatorDisplayColorCall {
	return &indicatorDisplayColorCall{Call: _m.Mock.On("DisplayColor", index, color), Parent: _m}
}

type indicatorDisplayColorCall struct {
	*mock.Call
	Parent *indicatorMock
}

func (_c *indicatorDisplayColorCall) Panic(msg string) *indicatorDisplayColorCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *indicatorDisplayColorCall) Once() *indicatorDisplayColorCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *indicatorDisplayColorCall) Twice() *indicatorDisplayColorCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *indicatorDisplayColorCall) Times(i int) *indicatorDisplayColorCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *indicatorDisplayColorCall) WaitUntil(w <-chan time.Time) *indicatorDisplayColorCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *indicatorDisplayColorCall) After(d time.Duration) *indicatorDisplayColorCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *indicatorDisplayColorCall) Run(fn func(args mock.Arguments)) *indicatorDisplayColorCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *indicatorDisplayColorCall) Maybe() *indicatorDisplayColorCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *indicatorDisplayColorCall) TypedReturns(a error) *indicatorDisplayColorCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *indicatorDisplayColorCall) ReturnsFn(fn func(int, Color) error) *indicatorDisplayColorCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *indicatorDisplayColorCall) TypedRun(fn func(int, Color)) *indicatorDisplayColorCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_index := args.Int(0)
		_color, _ := args.Get(1).(Color)
		fn(_index, _color)
	})
	return _c
}

func (_c *indicatorDisplayColorCall) OnBlink(index int, times int, color Color) *indicatorBlinkCall {
	return _c.Parent.OnBlink(index, times, color)
}

func (_c *indicatorDisplayColorCall) OnCleanup() *indicatorCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *indicatorDisplayColorCall) OnDisplayColor(index int, color Color) *indicatorDisplayColorCall {
	return _c.Parent.OnDisplayColor(index, color)
}

func (_c *indicatorDisplayColorCall) OnGetType() *indicatorGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *indicatorDisplayColorCall) OnBlinkRaw(index interface{}, times interface{}, color interface{}) *indicatorBlinkCall {
	return _c.Parent.OnBlinkRaw(index, times, color)
}

func (_c *indicatorDisplayColorCall) OnCleanupRaw() *indicatorCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *indicatorDisplayColorCall) OnDisplayColorRaw(index interface{}, color interface{}) *indicatorDisplayColorCall {
	return _c.Parent.OnDisplayColorRaw(index, color)
}

func (_c *indicatorDisplayColorCall) OnGetTypeRaw() *indicatorGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_m *indicatorMock) GetType() string {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() string); ok {
		return _rf()
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *indicatorMock) OnGetType() *indicatorGetTypeCall {
	return &indicatorGetTypeCall{Call: _m.Mock.On("GetType"), Parent: _m}
}

func (_m *indicatorMock) OnGetTypeRaw() *indicatorGetTypeCall {
	return &indicatorGetTypeCall{Call: _m.Mock.On("GetType"), Parent: _m}
}

type indicatorGetTypeCall struct {
	*mock.Call
	Parent *indicatorMock
}

func (_c *indicatorGetTypeCall) Panic(msg string) *indicatorGetTypeCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *indicatorGetTypeCall) Once() *indicatorGetTypeCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *indicatorGetTypeCall) Twice() *indicatorGetTypeCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *indicatorGetTypeCall) Times(i int) *indicatorGetTypeCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *indicatorGetTypeCall) WaitUntil(w <-chan time.Time) *indicatorGetTypeCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *indicatorGetTypeCall) After(d time.Duration) *indicatorGetTypeCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *indicatorGetTypeCall) Run(fn func(args mock.Arguments)) *indicatorGetTypeCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *indicatorGetTypeCall) Maybe() *indicatorGetTypeCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *indicatorGetTypeCall) TypedReturns(a string) *indicatorGetTypeCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *indicatorGetTypeCall) ReturnsFn(fn func() string) *indicatorGetTypeCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *indicatorGetTypeCall) TypedRun(fn func()) *indicatorGetTypeCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *indicatorGetTypeCall) OnBlink(index int, times int, color Color) *indicatorBlinkCall {
	return _c.Parent.OnBlink(index, times, color)
}

func (_c *indicatorGetTypeCall) OnCleanup() *indicatorCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *indicatorGetTypeCall) OnDisplayColor(index int, color Color) *indicatorDisplayColorCall {
	return _c.Parent.OnDisplayColor(index, color)
}

func (_c *indicatorGetTypeCall) OnGetType() *indicatorGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *indicatorGetTypeCall) OnBlinkRaw(index interface{}, times interface{}, color interface{}) *indicatorBlinkCall {
	return _c.Parent.OnBlinkRaw(index, times, color)
}

func (_c *indicatorGetTypeCall) OnCleanupRaw() *indicatorCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *indicatorGetTypeCall) OnDisplayColorRaw(index interface{}, color interface{}) *indicatorDisplayColorCall {
	return _c.Parent.OnDisplayColorRaw(index, color)
}

func (_c *indicatorGetTypeCall) OnGetTypeRaw() *indicatorGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}
