// Code generated by mocktail; DO NOT EDIT.

package reader

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// readerMock mock of Reader.
type readerMock struct{ mock.Mock }

// NewReaderMock creates a new readerMock.
func NewReaderMock(tb testing.TB) *readerMock {
	tb.Helper()

	m := &readerMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *readerMock) Cleanup() {
	_m.Called()
}

func (_m *readerMock) OnCleanup() *readerCleanupCall {
	return &readerCleanupCall{Call: _m.Mock.On("Cleanup"), Parent: _m}
}

func (_m *readerMock) OnCleanupRaw() *readerCleanupCall {
	return &readerCleanupCall{Call: _m.Mock.On("Cleanup"), Parent: _m}
}

type readerCleanupCall struct {
	*mock.Call
	Parent *readerMock
}

func (_c *readerCleanupCall) Panic(msg string) *readerCleanupCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *readerCleanupCall) Once() *readerCleanupCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *readerCleanupCall) Twice() *readerCleanupCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *readerCleanupCall) Times(i int) *readerCleanupCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *readerCleanupCall) WaitUntil(w <-chan time.Time) *readerCleanupCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *readerCleanupCall) After(d time.Duration) *readerCleanupCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *readerCleanupCall) Run(fn func(args mock.Arguments)) *readerCleanupCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *readerCleanupCall) Maybe() *readerCleanupCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *readerCleanupCall) TypedRun(fn func()) *readerCleanupCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *readerCleanupCall) OnCleanup() *readerCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *readerCleanupCall) OnGetTagChannel() *readerGetTagChannelCall {
	return _c.Parent.OnGetTagChannel()
}

func (_c *readerCleanupCall) OnGetType() *readerGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *readerCleanupCall) OnListenForTags() *readerListenForTagsCall {
	return _c.Parent.OnListenForTags()
}

func (_c *readerCleanupCall) OnReset() *readerResetCall {
	return _c.Parent.OnReset()
}

func (_c *readerCleanupCall) OnCleanupRaw() *readerCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *readerCleanupCall) OnGetTagChannelRaw() *readerGetTagChannelCall {
	return _c.Parent.OnGetTagChannelRaw()
}

func (_c *readerCleanupCall) OnGetTypeRaw() *readerGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *readerCleanupCall) OnListenForTagsRaw() *readerListenForTagsCall {
	return _c.Parent.OnListenForTagsRaw()
}

func (_c *readerCleanupCall) OnResetRaw() *readerResetCall {
	return _c.Parent.OnResetRaw()
}

func (_m *readerMock) GetTagChannel() <-chan string {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() <-chan string); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(<-chan string)

	return _ra0
}

func (_m *readerMock) OnGetTagChannel() *readerGetTagChannelCall {
	return &readerGetTagChannelCall{Call: _m.Mock.On("GetTagChannel"), Parent: _m}
}

func (_m *readerMock) OnGetTagChannelRaw() *readerGetTagChannelCall {
	return &readerGetTagChannelCall{Call: _m.Mock.On("GetTagChannel"), Parent: _m}
}

type readerGetTagChannelCall struct {
	*mock.Call
	Parent *readerMock
}

func (_c *readerGetTagChannelCall) Panic(msg string) *readerGetTagChannelCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *readerGetTagChannelCall) Once() *readerGetTagChannelCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *readerGetTagChannelCall) Twice() *readerGetTagChannelCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *readerGetTagChannelCall) Times(i int) *readerGetTagChannelCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *readerGetTagChannelCall) WaitUntil(w <-chan time.Time) *readerGetTagChannelCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *readerGetTagChannelCall) After(d time.Duration) *readerGetTagChannelCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *readerGetTagChannelCall) Run(fn func(args mock.Arguments)) *readerGetTagChannelCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *readerGetTagChannelCall) Maybe() *readerGetTagChannelCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *readerGetTagChannelCall) TypedReturns(a <-chan string) *readerGetTagChannelCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *readerGetTagChannelCall) ReturnsFn(fn func() <-chan string) *readerGetTagChannelCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *readerGetTagChannelCall) TypedRun(fn func()) *readerGetTagChannelCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *readerGetTagChannelCall) OnCleanup() *readerCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *readerGetTagChannelCall) OnGetTagChannel() *readerGetTagChannelCall {
	return _c.Parent.OnGetTagChannel()
}

func (_c *readerGetTagChannelCall) OnGetType() *readerGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *readerGetTagChannelCall) OnListenForTags() *readerListenForTagsCall {
	return _c.Parent.OnListenForTags()
}

func (_c *readerGetTagChannelCall) OnReset() *readerResetCall {
	return _c.Parent.OnReset()
}

func (_c *readerGetTagChannelCall) OnCleanupRaw() *readerCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *readerGetTagChannelCall) OnGetTagChannelRaw() *readerGetTagChannelCall {
	return _c.Parent.OnGetTagChannelRaw()
}

func (_c *readerGetTagChannelCall) OnGetTypeRaw() *readerGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *readerGetTagChannelCall) OnListenForTagsRaw() *readerListenForTagsCall {
	return _c.Parent.OnListenForTagsRaw()
}

func (_c *readerGetTagChannelCall) OnResetRaw() *readerResetCall {
	return _c.Parent.OnResetRaw()
}

func (_m *readerMock) GetType() string {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() string); ok {
		return _rf()
	}

	_ra0 := _ret.String(0)

	return _ra0
}

func (_m *readerMock) OnGetType() *readerGetTypeCall {
	return &readerGetTypeCall{Call: _m.Mock.On("GetType"), Parent: _m}
}

func (_m *readerMock) OnGetTypeRaw() *readerGetTypeCall {
	return &readerGetTypeCall{Call: _m.Mock.On("GetType"), Parent: _m}
}

type readerGetTypeCall struct {
	*mock.Call
	Parent *readerMock
}

func (_c *readerGetTypeCall) Panic(msg string) *readerGetTypeCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *readerGetTypeCall) Once() *readerGetTypeCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *readerGetTypeCall) Twice() *readerGetTypeCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *readerGetTypeCall) Times(i int) *readerGetTypeCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *readerGetTypeCall) WaitUntil(w <-chan time.Time) *readerGetTypeCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *readerGetTypeCall) After(d time.Duration) *readerGetTypeCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *readerGetTypeCall) Run(fn func(args mock.Arguments)) *readerGetTypeCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *readerGetTypeCall) Maybe() *readerGetTypeCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *readerGetTypeCall) TypedReturns(a string) *readerGetTypeCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *readerGetTypeCall) ReturnsFn(fn func() string) *readerGetTypeCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *readerGetTypeCall) TypedRun(fn func()) *readerGetTypeCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *readerGetTypeCall) OnCleanup() *readerCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *readerGetTypeCall) OnGetTagChannel() *readerGetTagChannelCall {
	return _c.Parent.OnGetTagChannel()
}

func (_c *readerGetTypeCall) OnGetType() *readerGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *readerGetTypeCall) OnListenForTags() *readerListenForTagsCall {
	return _c.Parent.OnListenForTags()
}

func (_c *readerGetTypeCall) OnReset() *readerResetCall {
	return _c.Parent.OnReset()
}

func (_c *readerGetTypeCall) OnCleanupRaw() *readerCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *readerGetTypeCall) OnGetTagChannelRaw() *readerGetTagChannelCall {
	return _c.Parent.OnGetTagChannelRaw()
}

func (_c *readerGetTypeCall) OnGetTypeRaw() *readerGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *readerGetTypeCall) OnListenForTagsRaw() *readerListenForTagsCall {
	return _c.Parent.OnListenForTagsRaw()
}

func (_c *readerGetTypeCall) OnResetRaw() *readerResetCall {
	return _c.Parent.OnResetRaw()
}

func (_m *readerMock) ListenForTags(_ context.Context) {
	_m.Called()
}

func (_m *readerMock) OnListenForTags() *readerListenForTagsCall {
	return &readerListenForTagsCall{Call: _m.Mock.On("ListenForTags"), Parent: _m}
}

func (_m *readerMock) OnListenForTagsRaw() *readerListenForTagsCall {
	return &readerListenForTagsCall{Call: _m.Mock.On("ListenForTags"), Parent: _m}
}

type readerListenForTagsCall struct {
	*mock.Call
	Parent *readerMock
}

func (_c *readerListenForTagsCall) Panic(msg string) *readerListenForTagsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *readerListenForTagsCall) Once() *readerListenForTagsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *readerListenForTagsCall) Twice() *readerListenForTagsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *readerListenForTagsCall) Times(i int) *readerListenForTagsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *readerListenForTagsCall) WaitUntil(w <-chan time.Time) *readerListenForTagsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *readerListenForTagsCall) After(d time.Duration) *readerListenForTagsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *readerListenForTagsCall) Run(fn func(args mock.Arguments)) *readerListenForTagsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *readerListenForTagsCall) Maybe() *readerListenForTagsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *readerListenForTagsCall) TypedRun(fn func()) *readerListenForTagsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *readerListenForTagsCall) OnCleanup() *readerCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *readerListenForTagsCall) OnGetTagChannel() *readerGetTagChannelCall {
	return _c.Parent.OnGetTagChannel()
}

func (_c *readerListenForTagsCall) OnGetType() *readerGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *readerListenForTagsCall) OnListenForTags() *readerListenForTagsCall {
	return _c.Parent.OnListenForTags()
}

func (_c *readerListenForTagsCall) OnReset() *readerResetCall {
	return _c.Parent.OnReset()
}

func (_c *readerListenForTagsCall) OnCleanupRaw() *readerCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *readerListenForTagsCall) OnGetTagChannelRaw() *readerGetTagChannelCall {
	return _c.Parent.OnGetTagChannelRaw()
}

func (_c *readerListenForTagsCall) OnGetTypeRaw() *readerGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *readerListenForTagsCall) OnListenForTagsRaw() *readerListenForTagsCall {
	return _c.Parent.OnListenForTagsRaw()
}

func (_c *readerListenForTagsCall) OnResetRaw() *readerResetCall {
	return _c.Parent.OnResetRaw()
}

func (_m *readerMock) Reset() {
	_m.Called()
}

func (_m *readerMock) OnReset() *readerResetCall {
	return &readerResetCall{Call: _m.Mock.On("Reset"), Parent: _m}
}

func (_m *readerMock) OnResetRaw() *readerResetCall {
	return &readerResetCall{Call: _m.Mock.On("Reset"), Parent: _m}
}

type readerResetCall struct {
	*mock.Call
	Parent *readerMock
}

func (_c *readerResetCall) Panic(msg string) *readerResetCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *readerResetCall) Once() *readerResetCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *readerResetCall) Twice() *readerResetCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *readerResetCall) Times(i int) *readerResetCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *readerResetCall) WaitUntil(w <-chan time.Time) *readerResetCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *readerResetCall) After(d time.Duration) *readerResetCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *readerResetCall) Run(fn func(args mock.Arguments)) *readerResetCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *readerResetCall) Maybe() *readerResetCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *readerResetCall) TypedRun(fn func()) *readerResetCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *readerResetCall) OnCleanup() *readerCleanupCall {
	return _c.Parent.OnCleanup()
}

func (_c *readerResetCall) OnGetTagChannel() *readerGetTagChannelCall {
	return _c.Parent.OnGetTagChannel()
}

func (_c *readerResetCall) OnGetType() *readerGetTypeCall {
	return _c.Parent.OnGetType()
}

func (_c *readerResetCall) OnListenForTags() *readerListenForTagsCall {
	return _c.Parent.OnListenForTags()
}

func (_c *readerResetCall) OnReset() *readerResetCall {
	return _c.Parent.OnReset()
}

func (_c *readerResetCall) OnCleanupRaw() *readerCleanupCall {
	return _c.Parent.OnCleanupRaw()
}

func (_c *readerResetCall) OnGetTagChannelRaw() *readerGetTagChannelCall {
	return _c.Parent.OnGetTagChannelRaw()
}

func (_c *readerResetCall) OnGetTypeRaw() *readerGetTypeCall {
	return _c.Parent.OnGetTypeRaw()
}

func (_c *readerResetCall) OnListenForTagsRaw() *readerListenForTagsCall {
	return _c.Parent.OnListenForTagsRaw()
}

func (_c *readerResetCall) OnResetRaw() *readerResetCall {
	return _c.Parent.OnResetRaw()
}
