// Code generated by mocktail; DO NOT EDIT.

package auth

import (
	"testing"
	"time"

	"github.com/lorenzodonini/ocpp-go/ocpp1.6/localauth"
	"github.com/lorenzodonini/ocpp-go/ocpp1.6/types"
	"github.com/stretchr/testify/mock"
)

// localAuthListMock mock of LocalAuthList.
type localAuthListMock struct{ mock.Mock }

// NewLocalAuthListMock creates a new localAuthListMock.
func NewLocalAuthListMock(tb testing.TB) *localAuthListMock {
	tb.Helper()

	m := &localAuthListMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *localAuthListMock) AddTag(tagId string, tagInfo *types.IdTagInfo) error {
	_ret := _m.Called(tagId, tagInfo)

	if _rf, ok := _ret.Get(0).(func(string, *types.IdTagInfo) error); ok {
		return _rf(tagId, tagInfo)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *localAuthListMock) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListAddTagCall {
	return &localAuthListAddTagCall{Call: _m.Mock.On("AddTag", tagId, tagInfo), Parent: _m}
}

func (_m *localAuthListMock) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListAddTagCall {
	return &localAuthListAddTagCall{Call: _m.Mock.On("AddTag", tagId, tagInfo), Parent: _m}
}

type localAuthListAddTagCall struct {
	*mock.Call
	Parent *localAuthListMock
}

func (_c *localAuthListAddTagCall) Panic(msg string) *localAuthListAddTagCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *localAuthListAddTagCall) Once() *localAuthListAddTagCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *localAuthListAddTagCall) Twice() *localAuthListAddTagCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *localAuthListAddTagCall) Times(i int) *localAuthListAddTagCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *localAuthListAddTagCall) WaitUntil(w <-chan time.Time) *localAuthListAddTagCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *localAuthListAddTagCall) After(d time.Duration) *localAuthListAddTagCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *localAuthListAddTagCall) Run(fn func(args mock.Arguments)) *localAuthListAddTagCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *localAuthListAddTagCall) Maybe() *localAuthListAddTagCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *localAuthListAddTagCall) TypedReturns(a error) *localAuthListAddTagCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *localAuthListAddTagCall) ReturnsFn(fn func(string, *types.IdTagInfo) error) *localAuthListAddTagCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *localAuthListAddTagCall) TypedRun(fn func(string, *types.IdTagInfo)) *localAuthListAddTagCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_tagId := args.String(0)
		_tagInfo, _ := args.Get(1).(*types.IdTagInfo)
		fn(_tagId, _tagInfo)
	})
	return _c
}

func (_c *localAuthListAddTagCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *localAuthListAddTagCall) OnGetTag(tagId string) *localAuthListGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *localAuthListAddTagCall) OnGetTags() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *localAuthListAddTagCall) OnGetVersion() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersion()
}

func (_c *localAuthListAddTagCall) OnRemoveAll() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAll()
}

func (_c *localAuthListAddTagCall) OnRemoveTag(tagId string) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *localAuthListAddTagCall) OnSetMaxTags(number int) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *localAuthListAddTagCall) OnSetVersion(version int) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersion(version)
}

func (_c *localAuthListAddTagCall) OnUpdateTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTag(tagId, tagInfo)
}

func (_c *localAuthListAddTagCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *localAuthListAddTagCall) OnGetTagRaw(tagId interface{}) *localAuthListGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *localAuthListAddTagCall) OnGetTagsRaw() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *localAuthListAddTagCall) OnGetVersionRaw() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersionRaw()
}

func (_c *localAuthListAddTagCall) OnRemoveAllRaw() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAllRaw()
}

func (_c *localAuthListAddTagCall) OnRemoveTagRaw(tagId interface{}) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *localAuthListAddTagCall) OnSetMaxTagsRaw(number interface{}) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *localAuthListAddTagCall) OnSetVersionRaw(version interface{}) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersionRaw(version)
}

func (_c *localAuthListAddTagCall) OnUpdateTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTagRaw(tagId, tagInfo)
}

func (_m *localAuthListMock) GetTag(tagId string) (*types.IdTagInfo, error) {
	_ret := _m.Called(tagId)

	if _rf, ok := _ret.Get(0).(func(string) (*types.IdTagInfo, error)); ok {
		return _rf(tagId)
	}

	_ra0, _ := _ret.Get(0).(*types.IdTagInfo)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *localAuthListMock) OnGetTag(tagId string) *localAuthListGetTagCall {
	return &localAuthListGetTagCall{Call: _m.Mock.On("GetTag", tagId), Parent: _m}
}

func (_m *localAuthListMock) OnGetTagRaw(tagId interface{}) *localAuthListGetTagCall {
	return &localAuthListGetTagCall{Call: _m.Mock.On("GetTag", tagId), Parent: _m}
}

type localAuthListGetTagCall struct {
	*mock.Call
	Parent *localAuthListMock
}

func (_c *localAuthListGetTagCall) Panic(msg string) *localAuthListGetTagCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *localAuthListGetTagCall) Once() *localAuthListGetTagCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *localAuthListGetTagCall) Twice() *localAuthListGetTagCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *localAuthListGetTagCall) Times(i int) *localAuthListGetTagCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *localAuthListGetTagCall) WaitUntil(w <-chan time.Time) *localAuthListGetTagCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *localAuthListGetTagCall) After(d time.Duration) *localAuthListGetTagCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *localAuthListGetTagCall) Run(fn func(args mock.Arguments)) *localAuthListGetTagCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *localAuthListGetTagCall) Maybe() *localAuthListGetTagCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *localAuthListGetTagCall) TypedReturns(a *types.IdTagInfo, b error) *localAuthListGetTagCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *localAuthListGetTagCall) ReturnsFn(fn func(string) (*types.IdTagInfo, error)) *localAuthListGetTagCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *localAuthListGetTagCall) TypedRun(fn func(string)) *localAuthListGetTagCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_tagId := args.String(0)
		fn(_tagId)
	})
	return _c
}

func (_c *localAuthListGetTagCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *localAuthListGetTagCall) OnGetTag(tagId string) *localAuthListGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *localAuthListGetTagCall) OnGetTags() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *localAuthListGetTagCall) OnGetVersion() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersion()
}

func (_c *localAuthListGetTagCall) OnRemoveAll() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAll()
}

func (_c *localAuthListGetTagCall) OnRemoveTag(tagId string) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *localAuthListGetTagCall) OnSetMaxTags(number int) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *localAuthListGetTagCall) OnSetVersion(version int) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersion(version)
}

func (_c *localAuthListGetTagCall) OnUpdateTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTag(tagId, tagInfo)
}

func (_c *localAuthListGetTagCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *localAuthListGetTagCall) OnGetTagRaw(tagId interface{}) *localAuthListGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *localAuthListGetTagCall) OnGetTagsRaw() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *localAuthListGetTagCall) OnGetVersionRaw() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersionRaw()
}

func (_c *localAuthListGetTagCall) OnRemoveAllRaw() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAllRaw()
}

func (_c *localAuthListGetTagCall) OnRemoveTagRaw(tagId interface{}) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *localAuthListGetTagCall) OnSetMaxTagsRaw(number interface{}) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *localAuthListGetTagCall) OnSetVersionRaw(version interface{}) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersionRaw(version)
}

func (_c *localAuthListGetTagCall) OnUpdateTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTagRaw(tagId, tagInfo)
}

func (_m *localAuthListMock) GetTags() []localauth.AuthorizationData {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() []localauth.AuthorizationData); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).([]localauth.AuthorizationData)

	return _ra0
}

func (_m *localAuthListMock) OnGetTags() *localAuthListGetTagsCall {
	return &localAuthListGetTagsCall{Call: _m.Mock.On("GetTags"), Parent: _m}
}

func (_m *localAuthListMock) OnGetTagsRaw() *localAuthListGetTagsCall {
	return &localAuthListGetTagsCall{Call: _m.Mock.On("GetTags"), Parent: _m}
}

type localAuthListGetTagsCall struct {
	*mock.Call
	Parent *localAuthListMock
}

func (_c *localAuthListGetTagsCall) Panic(msg string) *localAuthListGetTagsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *localAuthListGetTagsCall) Once() *localAuthListGetTagsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *localAuthListGetTagsCall) Twice() *localAuthListGetTagsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *localAuthListGetTagsCall) Times(i int) *localAuthListGetTagsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *localAuthListGetTagsCall) WaitUntil(w <-chan time.Time) *localAuthListGetTagsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *localAuthListGetTagsCall) After(d time.Duration) *localAuthListGetTagsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *localAuthListGetTagsCall) Run(fn func(args mock.Arguments)) *localAuthListGetTagsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *localAuthListGetTagsCall) Maybe() *localAuthListGetTagsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *localAuthListGetTagsCall) TypedReturns(a []localauth.AuthorizationData) *localAuthListGetTagsCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *localAuthListGetTagsCall) ReturnsFn(fn func() []localauth.AuthorizationData) *localAuthListGetTagsCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *localAuthListGetTagsCall) TypedRun(fn func()) *localAuthListGetTagsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *localAuthListGetTagsCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *localAuthListGetTagsCall) OnGetTag(tagId string) *localAuthListGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *localAuthListGetTagsCall) OnGetTags() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *localAuthListGetTagsCall) OnGetVersion() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersion()
}

func (_c *localAuthListGetTagsCall) OnRemoveAll() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAll()
}

func (_c *localAuthListGetTagsCall) OnRemoveTag(tagId string) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *localAuthListGetTagsCall) OnSetMaxTags(number int) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *localAuthListGetTagsCall) OnSetVersion(version int) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersion(version)
}

func (_c *localAuthListGetTagsCall) OnUpdateTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTag(tagId, tagInfo)
}

func (_c *localAuthListGetTagsCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *localAuthListGetTagsCall) OnGetTagRaw(tagId interface{}) *localAuthListGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *localAuthListGetTagsCall) OnGetTagsRaw() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *localAuthListGetTagsCall) OnGetVersionRaw() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersionRaw()
}

func (_c *localAuthListGetTagsCall) OnRemoveAllRaw() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAllRaw()
}

func (_c *localAuthListGetTagsCall) OnRemoveTagRaw(tagId interface{}) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *localAuthListGetTagsCall) OnSetMaxTagsRaw(number interface{}) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *localAuthListGetTagsCall) OnSetVersionRaw(version interface{}) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersionRaw(version)
}

func (_c *localAuthListGetTagsCall) OnUpdateTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTagRaw(tagId, tagInfo)
}

func (_m *localAuthListMock) GetVersion() int {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() int); ok {
		return _rf()
	}

	_ra0 := _ret.Int(0)

	return _ra0
}

func (_m *localAuthListMock) OnGetVersion() *localAuthListGetVersionCall {
	return &localAuthListGetVersionCall{Call: _m.Mock.On("GetVersion"), Parent: _m}
}

func (_m *localAuthListMock) OnGetVersionRaw() *localAuthListGetVersionCall {
	return &localAuthListGetVersionCall{Call: _m.Mock.On("GetVersion"), Parent: _m}
}

type localAuthListGetVersionCall struct {
	*mock.Call
	Parent *localAuthListMock
}

func (_c *localAuthListGetVersionCall) Panic(msg string) *localAuthListGetVersionCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *localAuthListGetVersionCall) Once() *localAuthListGetVersionCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *localAuthListGetVersionCall) Twice() *localAuthListGetVersionCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *localAuthListGetVersionCall) Times(i int) *localAuthListGetVersionCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *localAuthListGetVersionCall) WaitUntil(w <-chan time.Time) *localAuthListGetVersionCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *localAuthListGetVersionCall) After(d time.Duration) *localAuthListGetVersionCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *localAuthListGetVersionCall) Run(fn func(args mock.Arguments)) *localAuthListGetVersionCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *localAuthListGetVersionCall) Maybe() *localAuthListGetVersionCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *localAuthListGetVersionCall) TypedReturns(a int) *localAuthListGetVersionCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *localAuthListGetVersionCall) ReturnsFn(fn func() int) *localAuthListGetVersionCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *localAuthListGetVersionCall) TypedRun(fn func()) *localAuthListGetVersionCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *localAuthListGetVersionCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *localAuthListGetVersionCall) OnGetTag(tagId string) *localAuthListGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *localAuthListGetVersionCall) OnGetTags() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *localAuthListGetVersionCall) OnGetVersion() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersion()
}

func (_c *localAuthListGetVersionCall) OnRemoveAll() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAll()
}

func (_c *localAuthListGetVersionCall) OnRemoveTag(tagId string) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *localAuthListGetVersionCall) OnSetMaxTags(number int) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *localAuthListGetVersionCall) OnSetVersion(version int) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersion(version)
}

func (_c *localAuthListGetVersionCall) OnUpdateTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTag(tagId, tagInfo)
}

func (_c *localAuthListGetVersionCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *localAuthListGetVersionCall) OnGetTagRaw(tagId interface{}) *localAuthListGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *localAuthListGetVersionCall) OnGetTagsRaw() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *localAuthListGetVersionCall) OnGetVersionRaw() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersionRaw()
}

func (_c *localAuthListGetVersionCall) OnRemoveAllRaw() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAllRaw()
}

func (_c *localAuthListGetVersionCall) OnRemoveTagRaw(tagId interface{}) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *localAuthListGetVersionCall) OnSetMaxTagsRaw(number interface{}) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *localAuthListGetVersionCall) OnSetVersionRaw(version interface{}) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersionRaw(version)
}

func (_c *localAuthListGetVersionCall) OnUpdateTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTagRaw(tagId, tagInfo)
}

func (_m *localAuthListMock) RemoveAll() {
	_m.Called()
}

func (_m *localAuthListMock) OnRemoveAll() *localAuthListRemoveAllCall {
	return &localAuthListRemoveAllCall{Call: _m.Mock.On("RemoveAll"), Parent: _m}
}

func (_m *localAuthListMock) OnRemoveAllRaw() *localAuthListRemoveAllCall {
	return &localAuthListRemoveAllCall{Call: _m.Mock.On("RemoveAll"), Parent: _m}
}

type localAuthListRemoveAllCall struct {
	*mock.Call
	Parent *localAuthListMock
}

func (_c *localAuthListRemoveAllCall) Panic(msg string) *localAuthListRemoveAllCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *localAuthListRemoveAllCall) Once() *localAuthListRemoveAllCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *localAuthListRemoveAllCall) Twice() *localAuthListRemoveAllCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *localAuthListRemoveAllCall) Times(i int) *localAuthListRemoveAllCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *localAuthListRemoveAllCall) WaitUntil(w <-chan time.Time) *localAuthListRemoveAllCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *localAuthListRemoveAllCall) After(d time.Duration) *localAuthListRemoveAllCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *localAuthListRemoveAllCall) Run(fn func(args mock.Arguments)) *localAuthListRemoveAllCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *localAuthListRemoveAllCall) Maybe() *localAuthListRemoveAllCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *localAuthListRemoveAllCall) TypedRun(fn func()) *localAuthListRemoveAllCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *localAuthListRemoveAllCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *localAuthListRemoveAllCall) OnGetTag(tagId string) *localAuthListGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *localAuthListRemoveAllCall) OnGetTags() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *localAuthListRemoveAllCall) OnGetVersion() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersion()
}

func (_c *localAuthListRemoveAllCall) OnRemoveAll() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAll()
}

func (_c *localAuthListRemoveAllCall) OnRemoveTag(tagId string) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *localAuthListRemoveAllCall) OnSetMaxTags(number int) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *localAuthListRemoveAllCall) OnSetVersion(version int) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersion(version)
}

func (_c *localAuthListRemoveAllCall) OnUpdateTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTag(tagId, tagInfo)
}

func (_c *localAuthListRemoveAllCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *localAuthListRemoveAllCall) OnGetTagRaw(tagId interface{}) *localAuthListGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *localAuthListRemoveAllCall) OnGetTagsRaw() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *localAuthListRemoveAllCall) OnGetVersionRaw() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersionRaw()
}

func (_c *localAuthListRemoveAllCall) OnRemoveAllRaw() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAllRaw()
}

func (_c *localAuthListRemoveAllCall) OnRemoveTagRaw(tagId interface{}) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *localAuthListRemoveAllCall) OnSetMaxTagsRaw(number interface{}) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *localAuthListRemoveAllCall) OnSetVersionRaw(version interface{}) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersionRaw(version)
}

func (_c *localAuthListRemoveAllCall) OnUpdateTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTagRaw(tagId, tagInfo)
}

func (_m *localAuthListMock) RemoveTag(tagId string) error {
	_ret := _m.Called(tagId)

	if _rf, ok := _ret.Get(0).(func(string) error); ok {
		return _rf(tagId)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *localAuthListMock) OnRemoveTag(tagId string) *localAuthListRemoveTagCall {
	return &localAuthListRemoveTagCall{Call: _m.Mock.On("RemoveTag", tagId), Parent: _m}
}

func (_m *localAuthListMock) OnRemoveTagRaw(tagId interface{}) *localAuthListRemoveTagCall {
	return &localAuthListRemoveTagCall{Call: _m.Mock.On("RemoveTag", tagId), Parent: _m}
}

type localAuthListRemoveTagCall struct {
	*mock.Call
	Parent *localAuthListMock
}

func (_c *localAuthListRemoveTagCall) Panic(msg string) *localAuthListRemoveTagCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *localAuthListRemoveTagCall) Once() *localAuthListRemoveTagCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *localAuthListRemoveTagCall) Twice() *localAuthListRemoveTagCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *localAuthListRemoveTagCall) Times(i int) *localAuthListRemoveTagCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *localAuthListRemoveTagCall) WaitUntil(w <-chan time.Time) *localAuthListRemoveTagCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *localAuthListRemoveTagCall) After(d time.Duration) *localAuthListRemoveTagCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *localAuthListRemoveTagCall) Run(fn func(args mock.Arguments)) *localAuthListRemoveTagCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *localAuthListRemoveTagCall) Maybe() *localAuthListRemoveTagCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *localAuthListRemoveTagCall) TypedReturns(a error) *localAuthListRemoveTagCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *localAuthListRemoveTagCall) ReturnsFn(fn func(string) error) *localAuthListRemoveTagCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *localAuthListRemoveTagCall) TypedRun(fn func(string)) *localAuthListRemoveTagCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_tagId := args.String(0)
		fn(_tagId)
	})
	return _c
}

func (_c *localAuthListRemoveTagCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *localAuthListRemoveTagCall) OnGetTag(tagId string) *localAuthListGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *localAuthListRemoveTagCall) OnGetTags() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *localAuthListRemoveTagCall) OnGetVersion() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersion()
}

func (_c *localAuthListRemoveTagCall) OnRemoveAll() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAll()
}

func (_c *localAuthListRemoveTagCall) OnRemoveTag(tagId string) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *localAuthListRemoveTagCall) OnSetMaxTags(number int) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *localAuthListRemoveTagCall) OnSetVersion(version int) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersion(version)
}

func (_c *localAuthListRemoveTagCall) OnUpdateTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTag(tagId, tagInfo)
}

func (_c *localAuthListRemoveTagCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *localAuthListRemoveTagCall) OnGetTagRaw(tagId interface{}) *localAuthListGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *localAuthListRemoveTagCall) OnGetTagsRaw() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *localAuthListRemoveTagCall) OnGetVersionRaw() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersionRaw()
}

func (_c *localAuthListRemoveTagCall) OnRemoveAllRaw() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAllRaw()
}

func (_c *localAuthListRemoveTagCall) OnRemoveTagRaw(tagId interface{}) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *localAuthListRemoveTagCall) OnSetMaxTagsRaw(number interface{}) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *localAuthListRemoveTagCall) OnSetVersionRaw(version interface{}) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersionRaw(version)
}

func (_c *localAuthListRemoveTagCall) OnUpdateTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTagRaw(tagId, tagInfo)
}

func (_m *localAuthListMock) SetMaxTags(number int) {
	_m.Called(number)
}

func (_m *localAuthListMock) OnSetMaxTags(number int) *localAuthListSetMaxTagsCall {
	return &localAuthListSetMaxTagsCall{Call: _m.Mock.On("SetMaxTags", number), Parent: _m}
}

func (_m *localAuthListMock) OnSetMaxTagsRaw(number interface{}) *localAuthListSetMaxTagsCall {
	return &localAuthListSetMaxTagsCall{Call: _m.Mock.On("SetMaxTags", number), Parent: _m}
}

type localAuthListSetMaxTagsCall struct {
	*mock.Call
	Parent *localAuthListMock
}

func (_c *localAuthListSetMaxTagsCall) Panic(msg string) *localAuthListSetMaxTagsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *localAuthListSetMaxTagsCall) Once() *localAuthListSetMaxTagsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *localAuthListSetMaxTagsCall) Twice() *localAuthListSetMaxTagsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *localAuthListSetMaxTagsCall) Times(i int) *localAuthListSetMaxTagsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *localAuthListSetMaxTagsCall) WaitUntil(w <-chan time.Time) *localAuthListSetMaxTagsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *localAuthListSetMaxTagsCall) After(d time.Duration) *localAuthListSetMaxTagsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *localAuthListSetMaxTagsCall) Run(fn func(args mock.Arguments)) *localAuthListSetMaxTagsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *localAuthListSetMaxTagsCall) Maybe() *localAuthListSetMaxTagsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *localAuthListSetMaxTagsCall) TypedRun(fn func(int)) *localAuthListSetMaxTagsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_number := args.Int(0)
		fn(_number)
	})
	return _c
}

func (_c *localAuthListSetMaxTagsCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *localAuthListSetMaxTagsCall) OnGetTag(tagId string) *localAuthListGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *localAuthListSetMaxTagsCall) OnGetTags() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *localAuthListSetMaxTagsCall) OnGetVersion() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersion()
}

func (_c *localAuthListSetMaxTagsCall) OnRemoveAll() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAll()
}

func (_c *localAuthListSetMaxTagsCall) OnRemoveTag(tagId string) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *localAuthListSetMaxTagsCall) OnSetMaxTags(number int) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *localAuthListSetMaxTagsCall) OnSetVersion(version int) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersion(version)
}

func (_c *localAuthListSetMaxTagsCall) OnUpdateTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTag(tagId, tagInfo)
}

func (_c *localAuthListSetMaxTagsCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *localAuthListSetMaxTagsCall) OnGetTagRaw(tagId interface{}) *localAuthListGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *localAuthListSetMaxTagsCall) OnGetTagsRaw() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *localAuthListSetMaxTagsCall) OnGetVersionRaw() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersionRaw()
}

func (_c *localAuthListSetMaxTagsCall) OnRemoveAllRaw() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAllRaw()
}

func (_c *localAuthListSetMaxTagsCall) OnRemoveTagRaw(tagId interface{}) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *localAuthListSetMaxTagsCall) OnSetMaxTagsRaw(number interface{}) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *localAuthListSetMaxTagsCall) OnSetVersionRaw(version interface{}) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersionRaw(version)
}

func (_c *localAuthListSetMaxTagsCall) OnUpdateTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTagRaw(tagId, tagInfo)
}

func (_m *localAuthListMock) SetVersion(version int) {
	_m.Called(version)
}

func (_m *localAuthListMock) OnSetVersion(version int) *localAuthListSetVersionCall {
	return &localAuthListSetVersionCall{Call: _m.Mock.On("SetVersion", version), Parent: _m}
}

func (_m *localAuthListMock) OnSetVersionRaw(version interface{}) *localAuthListSetVersionCall {
	return &localAuthListSetVersionCall{Call: _m.Mock.On("SetVersion", version), Parent: _m}
}

type localAuthListSetVersionCall struct {
	*mock.Call
	Parent *localAuthListMock
}

func (_c *localAuthListSetVersionCall) Panic(msg string) *localAuthListSetVersionCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *localAuthListSetVersionCall) Once() *localAuthListSetVersionCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *localAuthListSetVersionCall) Twice() *localAuthListSetVersionCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *localAuthListSetVersionCall) Times(i int) *localAuthListSetVersionCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *localAuthListSetVersionCall) WaitUntil(w <-chan time.Time) *localAuthListSetVersionCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *localAuthListSetVersionCall) After(d time.Duration) *localAuthListSetVersionCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *localAuthListSetVersionCall) Run(fn func(args mock.Arguments)) *localAuthListSetVersionCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *localAuthListSetVersionCall) Maybe() *localAuthListSetVersionCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *localAuthListSetVersionCall) TypedRun(fn func(int)) *localAuthListSetVersionCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_version := args.Int(0)
		fn(_version)
	})
	return _c
}

func (_c *localAuthListSetVersionCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *localAuthListSetVersionCall) OnGetTag(tagId string) *localAuthListGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *localAuthListSetVersionCall) OnGetTags() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *localAuthListSetVersionCall) OnGetVersion() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersion()
}

func (_c *localAuthListSetVersionCall) OnRemoveAll() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAll()
}

func (_c *localAuthListSetVersionCall) OnRemoveTag(tagId string) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *localAuthListSetVersionCall) OnSetMaxTags(number int) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *localAuthListSetVersionCall) OnSetVersion(version int) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersion(version)
}

func (_c *localAuthListSetVersionCall) OnUpdateTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTag(tagId, tagInfo)
}

func (_c *localAuthListSetVersionCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *localAuthListSetVersionCall) OnGetTagRaw(tagId interface{}) *localAuthListGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *localAuthListSetVersionCall) OnGetTagsRaw() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *localAuthListSetVersionCall) OnGetVersionRaw() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersionRaw()
}

func (_c *localAuthListSetVersionCall) OnRemoveAllRaw() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAllRaw()
}

func (_c *localAuthListSetVersionCall) OnRemoveTagRaw(tagId interface{}) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *localAuthListSetVersionCall) OnSetMaxTagsRaw(number interface{}) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *localAuthListSetVersionCall) OnSetVersionRaw(version interface{}) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersionRaw(version)
}

func (_c *localAuthListSetVersionCall) OnUpdateTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTagRaw(tagId, tagInfo)
}

func (_m *localAuthListMock) UpdateTag(tagId string, tagInfo *types.IdTagInfo) error {
	_ret := _m.Called(tagId, tagInfo)

	if _rf, ok := _ret.Get(0).(func(string, *types.IdTagInfo) error); ok {
		return _rf(tagId, tagInfo)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *localAuthListMock) OnUpdateTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListUpdateTagCall {
	return &localAuthListUpdateTagCall{Call: _m.Mock.On("UpdateTag", tagId, tagInfo), Parent: _m}
}

func (_m *localAuthListMock) OnUpdateTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListUpdateTagCall {
	return &localAuthListUpdateTagCall{Call: _m.Mock.On("UpdateTag", tagId, tagInfo), Parent: _m}
}

type localAuthListUpdateTagCall struct {
	*mock.Call
	Parent *localAuthListMock
}

func (_c *localAuthListUpdateTagCall) Panic(msg string) *localAuthListUpdateTagCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *localAuthListUpdateTagCall) Once() *localAuthListUpdateTagCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *localAuthListUpdateTagCall) Twice() *localAuthListUpdateTagCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *localAuthListUpdateTagCall) Times(i int) *localAuthListUpdateTagCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *localAuthListUpdateTagCall) WaitUntil(w <-chan time.Time) *localAuthListUpdateTagCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *localAuthListUpdateTagCall) After(d time.Duration) *localAuthListUpdateTagCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *localAuthListUpdateTagCall) Run(fn func(args mock.Arguments)) *localAuthListUpdateTagCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *localAuthListUpdateTagCall) Maybe() *localAuthListUpdateTagCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *localAuthListUpdateTagCall) TypedReturns(a error) *localAuthListUpdateTagCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *localAuthListUpdateTagCall) ReturnsFn(fn func(string, *types.IdTagInfo) error) *localAuthListUpdateTagCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *localAuthListUpdateTagCall) TypedRun(fn func(string, *types.IdTagInfo)) *localAuthListUpdateTagCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_tagId := args.String(0)
		_tagInfo, _ := args.Get(1).(*types.IdTagInfo)
		fn(_tagId, _tagInfo)
	})
	return _c
}

func (_c *localAuthListUpdateTagCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *localAuthListUpdateTagCall) OnGetTag(tagId string) *localAuthListGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *localAuthListUpdateTagCall) OnGetTags() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *localAuthListUpdateTagCall) OnGetVersion() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersion()
}

func (_c *localAuthListUpdateTagCall) OnRemoveAll() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAll()
}

func (_c *localAuthListUpdateTagCall) OnRemoveTag(tagId string) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *localAuthListUpdateTagCall) OnSetMaxTags(number int) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *localAuthListUpdateTagCall) OnSetVersion(version int) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersion(version)
}

func (_c *localAuthListUpdateTagCall) OnUpdateTag(tagId string, tagInfo *types.IdTagInfo) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTag(tagId, tagInfo)
}

func (_c *localAuthListUpdateTagCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *localAuthListUpdateTagCall) OnGetTagRaw(tagId interface{}) *localAuthListGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *localAuthListUpdateTagCall) OnGetTagsRaw() *localAuthListGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *localAuthListUpdateTagCall) OnGetVersionRaw() *localAuthListGetVersionCall {
	return _c.Parent.OnGetVersionRaw()
}

func (_c *localAuthListUpdateTagCall) OnRemoveAllRaw() *localAuthListRemoveAllCall {
	return _c.Parent.OnRemoveAllRaw()
}

func (_c *localAuthListUpdateTagCall) OnRemoveTagRaw(tagId interface{}) *localAuthListRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *localAuthListUpdateTagCall) OnSetMaxTagsRaw(number interface{}) *localAuthListSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *localAuthListUpdateTagCall) OnSetVersionRaw(version interface{}) *localAuthListSetVersionCall {
	return _c.Parent.OnSetVersionRaw(version)
}

func (_c *localAuthListUpdateTagCall) OnUpdateTagRaw(tagId interface{}, tagInfo interface{}) *localAuthListUpdateTagCall {
	return _c.Parent.OnUpdateTagRaw(tagId, tagInfo)
}

// tagManagerMock mock of TagManager.
type tagManagerMock struct{ mock.Mock }

// NewTagManagerMock creates a new tagManagerMock.
func NewTagManagerMock(tb testing.TB) *tagManagerMock {
	tb.Helper()

	m := &tagManagerMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *tagManagerMock) AddTag(tagId string, tagInfo *types.IdTagInfo) error {
	_ret := _m.Called(tagId, tagInfo)

	if _rf, ok := _ret.Get(0).(func(string, *types.IdTagInfo) error); ok {
		return _rf(tagId, tagInfo)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *tagManagerMock) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *tagManagerAddTagCall {
	return &tagManagerAddTagCall{Call: _m.Mock.On("AddTag", tagId, tagInfo), Parent: _m}
}

func (_m *tagManagerMock) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *tagManagerAddTagCall {
	return &tagManagerAddTagCall{Call: _m.Mock.On("AddTag", tagId, tagInfo), Parent: _m}
}

type tagManagerAddTagCall struct {
	*mock.Call
	Parent *tagManagerMock
}

func (_c *tagManagerAddTagCall) Panic(msg string) *tagManagerAddTagCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *tagManagerAddTagCall) Once() *tagManagerAddTagCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *tagManagerAddTagCall) Twice() *tagManagerAddTagCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *tagManagerAddTagCall) Times(i int) *tagManagerAddTagCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *tagManagerAddTagCall) WaitUntil(w <-chan time.Time) *tagManagerAddTagCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *tagManagerAddTagCall) After(d time.Duration) *tagManagerAddTagCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *tagManagerAddTagCall) Run(fn func(args mock.Arguments)) *tagManagerAddTagCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *tagManagerAddTagCall) Maybe() *tagManagerAddTagCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *tagManagerAddTagCall) TypedReturns(a error) *tagManagerAddTagCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *tagManagerAddTagCall) ReturnsFn(fn func(string, *types.IdTagInfo) error) *tagManagerAddTagCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *tagManagerAddTagCall) TypedRun(fn func(string, *types.IdTagInfo)) *tagManagerAddTagCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_tagId := args.String(0)
		_tagInfo, _ := args.Get(1).(*types.IdTagInfo)
		fn(_tagId, _tagInfo)
	})
	return _c
}

func (_c *tagManagerAddTagCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *tagManagerAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *tagManagerAddTagCall) OnClearCache() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCache()
}

func (_c *tagManagerAddTagCall) OnGetAuthListVersion() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersion()
}

func (_c *tagManagerAddTagCall) OnGetTag(tagId string) *tagManagerGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *tagManagerAddTagCall) OnGetTags() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *tagManagerAddTagCall) OnRemoveTag(tagId string) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *tagManagerAddTagCall) OnSetMaxTags(number int) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *tagManagerAddTagCall) OnUpdateLocalAuthList(version int, updateType localauth.UpdateType, tags []localauth.AuthorizationData) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthList(version, updateType, tags)
}

func (_c *tagManagerAddTagCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *tagManagerAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *tagManagerAddTagCall) OnClearCacheRaw() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCacheRaw()
}

func (_c *tagManagerAddTagCall) OnGetAuthListVersionRaw() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersionRaw()
}

func (_c *tagManagerAddTagCall) OnGetTagRaw(tagId interface{}) *tagManagerGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *tagManagerAddTagCall) OnGetTagsRaw() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *tagManagerAddTagCall) OnRemoveTagRaw(tagId interface{}) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *tagManagerAddTagCall) OnSetMaxTagsRaw(number interface{}) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *tagManagerAddTagCall) OnUpdateLocalAuthListRaw(version interface{}, updateType interface{}, tags interface{}) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthListRaw(version, updateType, tags)
}

func (_m *tagManagerMock) ClearCache() {
	_m.Called()
}

func (_m *tagManagerMock) OnClearCache() *tagManagerClearCacheCall {
	return &tagManagerClearCacheCall{Call: _m.Mock.On("ClearCache"), Parent: _m}
}

func (_m *tagManagerMock) OnClearCacheRaw() *tagManagerClearCacheCall {
	return &tagManagerClearCacheCall{Call: _m.Mock.On("ClearCache"), Parent: _m}
}

type tagManagerClearCacheCall struct {
	*mock.Call
	Parent *tagManagerMock
}

func (_c *tagManagerClearCacheCall) Panic(msg string) *tagManagerClearCacheCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *tagManagerClearCacheCall) Once() *tagManagerClearCacheCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *tagManagerClearCacheCall) Twice() *tagManagerClearCacheCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *tagManagerClearCacheCall) Times(i int) *tagManagerClearCacheCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *tagManagerClearCacheCall) WaitUntil(w <-chan time.Time) *tagManagerClearCacheCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *tagManagerClearCacheCall) After(d time.Duration) *tagManagerClearCacheCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *tagManagerClearCacheCall) Run(fn func(args mock.Arguments)) *tagManagerClearCacheCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *tagManagerClearCacheCall) Maybe() *tagManagerClearCacheCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *tagManagerClearCacheCall) TypedRun(fn func()) *tagManagerClearCacheCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *tagManagerClearCacheCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *tagManagerAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *tagManagerClearCacheCall) OnClearCache() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCache()
}

func (_c *tagManagerClearCacheCall) OnGetAuthListVersion() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersion()
}

func (_c *tagManagerClearCacheCall) OnGetTag(tagId string) *tagManagerGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *tagManagerClearCacheCall) OnGetTags() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *tagManagerClearCacheCall) OnRemoveTag(tagId string) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *tagManagerClearCacheCall) OnSetMaxTags(number int) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *tagManagerClearCacheCall) OnUpdateLocalAuthList(version int, updateType localauth.UpdateType, tags []localauth.AuthorizationData) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthList(version, updateType, tags)
}

func (_c *tagManagerClearCacheCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *tagManagerAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *tagManagerClearCacheCall) OnClearCacheRaw() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCacheRaw()
}

func (_c *tagManagerClearCacheCall) OnGetAuthListVersionRaw() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersionRaw()
}

func (_c *tagManagerClearCacheCall) OnGetTagRaw(tagId interface{}) *tagManagerGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *tagManagerClearCacheCall) OnGetTagsRaw() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *tagManagerClearCacheCall) OnRemoveTagRaw(tagId interface{}) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *tagManagerClearCacheCall) OnSetMaxTagsRaw(number interface{}) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *tagManagerClearCacheCall) OnUpdateLocalAuthListRaw(version interface{}, updateType interface{}, tags interface{}) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthListRaw(version, updateType, tags)
}

func (_m *tagManagerMock) GetAuthListVersion() int {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() int); ok {
		return _rf()
	}

	_ra0 := _ret.Int(0)

	return _ra0
}

func (_m *tagManagerMock) OnGetAuthListVersion() *tagManagerGetAuthListVersionCall {
	return &tagManagerGetAuthListVersionCall{Call: _m.Mock.On("GetAuthListVersion"), Parent: _m}
}

func (_m *tagManagerMock) OnGetAuthListVersionRaw() *tagManagerGetAuthListVersionCall {
	return &tagManagerGetAuthListVersionCall{Call: _m.Mock.On("GetAuthListVersion"), Parent: _m}
}

type tagManagerGetAuthListVersionCall struct {
	*mock.Call
	Parent *tagManagerMock
}

func (_c *tagManagerGetAuthListVersionCall) Panic(msg string) *tagManagerGetAuthListVersionCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *tagManagerGetAuthListVersionCall) Once() *tagManagerGetAuthListVersionCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *tagManagerGetAuthListVersionCall) Twice() *tagManagerGetAuthListVersionCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *tagManagerGetAuthListVersionCall) Times(i int) *tagManagerGetAuthListVersionCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *tagManagerGetAuthListVersionCall) WaitUntil(w <-chan time.Time) *tagManagerGetAuthListVersionCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *tagManagerGetAuthListVersionCall) After(d time.Duration) *tagManagerGetAuthListVersionCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *tagManagerGetAuthListVersionCall) Run(fn func(args mock.Arguments)) *tagManagerGetAuthListVersionCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *tagManagerGetAuthListVersionCall) Maybe() *tagManagerGetAuthListVersionCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *tagManagerGetAuthListVersionCall) TypedReturns(a int) *tagManagerGetAuthListVersionCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *tagManagerGetAuthListVersionCall) ReturnsFn(fn func() int) *tagManagerGetAuthListVersionCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *tagManagerGetAuthListVersionCall) TypedRun(fn func()) *tagManagerGetAuthListVersionCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *tagManagerGetAuthListVersionCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *tagManagerAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *tagManagerGetAuthListVersionCall) OnClearCache() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCache()
}

func (_c *tagManagerGetAuthListVersionCall) OnGetAuthListVersion() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersion()
}

func (_c *tagManagerGetAuthListVersionCall) OnGetTag(tagId string) *tagManagerGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *tagManagerGetAuthListVersionCall) OnGetTags() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *tagManagerGetAuthListVersionCall) OnRemoveTag(tagId string) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *tagManagerGetAuthListVersionCall) OnSetMaxTags(number int) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *tagManagerGetAuthListVersionCall) OnUpdateLocalAuthList(version int, updateType localauth.UpdateType, tags []localauth.AuthorizationData) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthList(version, updateType, tags)
}

func (_c *tagManagerGetAuthListVersionCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *tagManagerAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *tagManagerGetAuthListVersionCall) OnClearCacheRaw() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCacheRaw()
}

func (_c *tagManagerGetAuthListVersionCall) OnGetAuthListVersionRaw() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersionRaw()
}

func (_c *tagManagerGetAuthListVersionCall) OnGetTagRaw(tagId interface{}) *tagManagerGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *tagManagerGetAuthListVersionCall) OnGetTagsRaw() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *tagManagerGetAuthListVersionCall) OnRemoveTagRaw(tagId interface{}) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *tagManagerGetAuthListVersionCall) OnSetMaxTagsRaw(number interface{}) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *tagManagerGetAuthListVersionCall) OnUpdateLocalAuthListRaw(version interface{}, updateType interface{}, tags interface{}) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthListRaw(version, updateType, tags)
}

func (_m *tagManagerMock) GetTag(tagId string) (*types.IdTagInfo, error) {
	_ret := _m.Called(tagId)

	if _rf, ok := _ret.Get(0).(func(string) (*types.IdTagInfo, error)); ok {
		return _rf(tagId)
	}

	_ra0, _ := _ret.Get(0).(*types.IdTagInfo)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *tagManagerMock) OnGetTag(tagId string) *tagManagerGetTagCall {
	return &tagManagerGetTagCall{Call: _m.Mock.On("GetTag", tagId), Parent: _m}
}

func (_m *tagManagerMock) OnGetTagRaw(tagId interface{}) *tagManagerGetTagCall {
	return &tagManagerGetTagCall{Call: _m.Mock.On("GetTag", tagId), Parent: _m}
}

type tagManagerGetTagCall struct {
	*mock.Call
	Parent *tagManagerMock
}

func (_c *tagManagerGetTagCall) Panic(msg string) *tagManagerGetTagCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *tagManagerGetTagCall) Once() *tagManagerGetTagCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *tagManagerGetTagCall) Twice() *tagManagerGetTagCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *tagManagerGetTagCall) Times(i int) *tagManagerGetTagCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *tagManagerGetTagCall) WaitUntil(w <-chan time.Time) *tagManagerGetTagCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *tagManagerGetTagCall) After(d time.Duration) *tagManagerGetTagCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *tagManagerGetTagCall) Run(fn func(args mock.Arguments)) *tagManagerGetTagCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *tagManagerGetTagCall) Maybe() *tagManagerGetTagCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *tagManagerGetTagCall) TypedReturns(a *types.IdTagInfo, b error) *tagManagerGetTagCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *tagManagerGetTagCall) ReturnsFn(fn func(string) (*types.IdTagInfo, error)) *tagManagerGetTagCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *tagManagerGetTagCall) TypedRun(fn func(string)) *tagManagerGetTagCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_tagId := args.String(0)
		fn(_tagId)
	})
	return _c
}

func (_c *tagManagerGetTagCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *tagManagerAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *tagManagerGetTagCall) OnClearCache() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCache()
}

func (_c *tagManagerGetTagCall) OnGetAuthListVersion() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersion()
}

func (_c *tagManagerGetTagCall) OnGetTag(tagId string) *tagManagerGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *tagManagerGetTagCall) OnGetTags() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *tagManagerGetTagCall) OnRemoveTag(tagId string) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *tagManagerGetTagCall) OnSetMaxTags(number int) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *tagManagerGetTagCall) OnUpdateLocalAuthList(version int, updateType localauth.UpdateType, tags []localauth.AuthorizationData) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthList(version, updateType, tags)
}

func (_c *tagManagerGetTagCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *tagManagerAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *tagManagerGetTagCall) OnClearCacheRaw() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCacheRaw()
}

func (_c *tagManagerGetTagCall) OnGetAuthListVersionRaw() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersionRaw()
}

func (_c *tagManagerGetTagCall) OnGetTagRaw(tagId interface{}) *tagManagerGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *tagManagerGetTagCall) OnGetTagsRaw() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *tagManagerGetTagCall) OnRemoveTagRaw(tagId interface{}) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *tagManagerGetTagCall) OnSetMaxTagsRaw(number interface{}) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *tagManagerGetTagCall) OnUpdateLocalAuthListRaw(version interface{}, updateType interface{}, tags interface{}) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthListRaw(version, updateType, tags)
}

func (_m *tagManagerMock) GetTags() []localauth.AuthorizationData {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() []localauth.AuthorizationData); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).([]localauth.AuthorizationData)

	return _ra0
}

func (_m *tagManagerMock) OnGetTags() *tagManagerGetTagsCall {
	return &tagManagerGetTagsCall{Call: _m.Mock.On("GetTags"), Parent: _m}
}

func (_m *tagManagerMock) OnGetTagsRaw() *tagManagerGetTagsCall {
	return &tagManagerGetTagsCall{Call: _m.Mock.On("GetTags"), Parent: _m}
}

type tagManagerGetTagsCall struct {
	*mock.Call
	Parent *tagManagerMock
}

func (_c *tagManagerGetTagsCall) Panic(msg string) *tagManagerGetTagsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *tagManagerGetTagsCall) Once() *tagManagerGetTagsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *tagManagerGetTagsCall) Twice() *tagManagerGetTagsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *tagManagerGetTagsCall) Times(i int) *tagManagerGetTagsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *tagManagerGetTagsCall) WaitUntil(w <-chan time.Time) *tagManagerGetTagsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *tagManagerGetTagsCall) After(d time.Duration) *tagManagerGetTagsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *tagManagerGetTagsCall) Run(fn func(args mock.Arguments)) *tagManagerGetTagsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *tagManagerGetTagsCall) Maybe() *tagManagerGetTagsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *tagManagerGetTagsCall) TypedReturns(a []localauth.AuthorizationData) *tagManagerGetTagsCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *tagManagerGetTagsCall) ReturnsFn(fn func() []localauth.AuthorizationData) *tagManagerGetTagsCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *tagManagerGetTagsCall) TypedRun(fn func()) *tagManagerGetTagsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *tagManagerGetTagsCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *tagManagerAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *tagManagerGetTagsCall) OnClearCache() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCache()
}

func (_c *tagManagerGetTagsCall) OnGetAuthListVersion() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersion()
}

func (_c *tagManagerGetTagsCall) OnGetTag(tagId string) *tagManagerGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *tagManagerGetTagsCall) OnGetTags() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *tagManagerGetTagsCall) OnRemoveTag(tagId string) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *tagManagerGetTagsCall) OnSetMaxTags(number int) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *tagManagerGetTagsCall) OnUpdateLocalAuthList(version int, updateType localauth.UpdateType, tags []localauth.AuthorizationData) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthList(version, updateType, tags)
}

func (_c *tagManagerGetTagsCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *tagManagerAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *tagManagerGetTagsCall) OnClearCacheRaw() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCacheRaw()
}

func (_c *tagManagerGetTagsCall) OnGetAuthListVersionRaw() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersionRaw()
}

func (_c *tagManagerGetTagsCall) OnGetTagRaw(tagId interface{}) *tagManagerGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *tagManagerGetTagsCall) OnGetTagsRaw() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *tagManagerGetTagsCall) OnRemoveTagRaw(tagId interface{}) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *tagManagerGetTagsCall) OnSetMaxTagsRaw(number interface{}) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *tagManagerGetTagsCall) OnUpdateLocalAuthListRaw(version interface{}, updateType interface{}, tags interface{}) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthListRaw(version, updateType, tags)
}

func (_m *tagManagerMock) RemoveTag(tagId string) error {
	_ret := _m.Called(tagId)

	if _rf, ok := _ret.Get(0).(func(string) error); ok {
		return _rf(tagId)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *tagManagerMock) OnRemoveTag(tagId string) *tagManagerRemoveTagCall {
	return &tagManagerRemoveTagCall{Call: _m.Mock.On("RemoveTag", tagId), Parent: _m}
}

func (_m *tagManagerMock) OnRemoveTagRaw(tagId interface{}) *tagManagerRemoveTagCall {
	return &tagManagerRemoveTagCall{Call: _m.Mock.On("RemoveTag", tagId), Parent: _m}
}

type tagManagerRemoveTagCall struct {
	*mock.Call
	Parent *tagManagerMock
}

func (_c *tagManagerRemoveTagCall) Panic(msg string) *tagManagerRemoveTagCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *tagManagerRemoveTagCall) Once() *tagManagerRemoveTagCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *tagManagerRemoveTagCall) Twice() *tagManagerRemoveTagCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *tagManagerRemoveTagCall) Times(i int) *tagManagerRemoveTagCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *tagManagerRemoveTagCall) WaitUntil(w <-chan time.Time) *tagManagerRemoveTagCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *tagManagerRemoveTagCall) After(d time.Duration) *tagManagerRemoveTagCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *tagManagerRemoveTagCall) Run(fn func(args mock.Arguments)) *tagManagerRemoveTagCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *tagManagerRemoveTagCall) Maybe() *tagManagerRemoveTagCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *tagManagerRemoveTagCall) TypedReturns(a error) *tagManagerRemoveTagCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *tagManagerRemoveTagCall) ReturnsFn(fn func(string) error) *tagManagerRemoveTagCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *tagManagerRemoveTagCall) TypedRun(fn func(string)) *tagManagerRemoveTagCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_tagId := args.String(0)
		fn(_tagId)
	})
	return _c
}

func (_c *tagManagerRemoveTagCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *tagManagerAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *tagManagerRemoveTagCall) OnClearCache() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCache()
}

func (_c *tagManagerRemoveTagCall) OnGetAuthListVersion() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersion()
}

func (_c *tagManagerRemoveTagCall) OnGetTag(tagId string) *tagManagerGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *tagManagerRemoveTagCall) OnGetTags() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *tagManagerRemoveTagCall) OnRemoveTag(tagId string) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *tagManagerRemoveTagCall) OnSetMaxTags(number int) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *tagManagerRemoveTagCall) OnUpdateLocalAuthList(version int, updateType localauth.UpdateType, tags []localauth.AuthorizationData) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthList(version, updateType, tags)
}

func (_c *tagManagerRemoveTagCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *tagManagerAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *tagManagerRemoveTagCall) OnClearCacheRaw() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCacheRaw()
}

func (_c *tagManagerRemoveTagCall) OnGetAuthListVersionRaw() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersionRaw()
}

func (_c *tagManagerRemoveTagCall) OnGetTagRaw(tagId interface{}) *tagManagerGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *tagManagerRemoveTagCall) OnGetTagsRaw() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *tagManagerRemoveTagCall) OnRemoveTagRaw(tagId interface{}) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *tagManagerRemoveTagCall) OnSetMaxTagsRaw(number interface{}) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *tagManagerRemoveTagCall) OnUpdateLocalAuthListRaw(version interface{}, updateType interface{}, tags interface{}) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthListRaw(version, updateType, tags)
}

func (_m *tagManagerMock) SetMaxTags(number int) {
	_m.Called(number)
}

func (_m *tagManagerMock) OnSetMaxTags(number int) *tagManagerSetMaxTagsCall {
	return &tagManagerSetMaxTagsCall{Call: _m.Mock.On("SetMaxTags", number), Parent: _m}
}

func (_m *tagManagerMock) OnSetMaxTagsRaw(number interface{}) *tagManagerSetMaxTagsCall {
	return &tagManagerSetMaxTagsCall{Call: _m.Mock.On("SetMaxTags", number), Parent: _m}
}

type tagManagerSetMaxTagsCall struct {
	*mock.Call
	Parent *tagManagerMock
}

func (_c *tagManagerSetMaxTagsCall) Panic(msg string) *tagManagerSetMaxTagsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *tagManagerSetMaxTagsCall) Once() *tagManagerSetMaxTagsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *tagManagerSetMaxTagsCall) Twice() *tagManagerSetMaxTagsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *tagManagerSetMaxTagsCall) Times(i int) *tagManagerSetMaxTagsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *tagManagerSetMaxTagsCall) WaitUntil(w <-chan time.Time) *tagManagerSetMaxTagsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *tagManagerSetMaxTagsCall) After(d time.Duration) *tagManagerSetMaxTagsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *tagManagerSetMaxTagsCall) Run(fn func(args mock.Arguments)) *tagManagerSetMaxTagsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *tagManagerSetMaxTagsCall) Maybe() *tagManagerSetMaxTagsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *tagManagerSetMaxTagsCall) TypedRun(fn func(int)) *tagManagerSetMaxTagsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_number := args.Int(0)
		fn(_number)
	})
	return _c
}

func (_c *tagManagerSetMaxTagsCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *tagManagerAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *tagManagerSetMaxTagsCall) OnClearCache() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCache()
}

func (_c *tagManagerSetMaxTagsCall) OnGetAuthListVersion() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersion()
}

func (_c *tagManagerSetMaxTagsCall) OnGetTag(tagId string) *tagManagerGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *tagManagerSetMaxTagsCall) OnGetTags() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *tagManagerSetMaxTagsCall) OnRemoveTag(tagId string) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *tagManagerSetMaxTagsCall) OnSetMaxTags(number int) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *tagManagerSetMaxTagsCall) OnUpdateLocalAuthList(version int, updateType localauth.UpdateType, tags []localauth.AuthorizationData) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthList(version, updateType, tags)
}

func (_c *tagManagerSetMaxTagsCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *tagManagerAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *tagManagerSetMaxTagsCall) OnClearCacheRaw() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCacheRaw()
}

func (_c *tagManagerSetMaxTagsCall) OnGetAuthListVersionRaw() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersionRaw()
}

func (_c *tagManagerSetMaxTagsCall) OnGetTagRaw(tagId interface{}) *tagManagerGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *tagManagerSetMaxTagsCall) OnGetTagsRaw() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *tagManagerSetMaxTagsCall) OnRemoveTagRaw(tagId interface{}) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *tagManagerSetMaxTagsCall) OnSetMaxTagsRaw(number interface{}) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *tagManagerSetMaxTagsCall) OnUpdateLocalAuthListRaw(version interface{}, updateType interface{}, tags interface{}) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthListRaw(version, updateType, tags)
}

func (_m *tagManagerMock) UpdateLocalAuthList(version int, updateType localauth.UpdateType, tags []localauth.AuthorizationData) error {
	_ret := _m.Called(version, updateType, tags)

	if _rf, ok := _ret.Get(0).(func(int, localauth.UpdateType, []localauth.AuthorizationData) error); ok {
		return _rf(version, updateType, tags)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *tagManagerMock) OnUpdateLocalAuthList(version int, updateType localauth.UpdateType, tags []localauth.AuthorizationData) *tagManagerUpdateLocalAuthListCall {
	return &tagManagerUpdateLocalAuthListCall{Call: _m.Mock.On("UpdateLocalAuthList", version, updateType, tags), Parent: _m}
}

func (_m *tagManagerMock) OnUpdateLocalAuthListRaw(version interface{}, updateType interface{}, tags interface{}) *tagManagerUpdateLocalAuthListCall {
	return &tagManagerUpdateLocalAuthListCall{Call: _m.Mock.On("UpdateLocalAuthList", version, updateType, tags), Parent: _m}
}

type tagManagerUpdateLocalAuthListCall struct {
	*mock.Call
	Parent *tagManagerMock
}

func (_c *tagManagerUpdateLocalAuthListCall) Panic(msg string) *tagManagerUpdateLocalAuthListCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *tagManagerUpdateLocalAuthListCall) Once() *tagManagerUpdateLocalAuthListCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *tagManagerUpdateLocalAuthListCall) Twice() *tagManagerUpdateLocalAuthListCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *tagManagerUpdateLocalAuthListCall) Times(i int) *tagManagerUpdateLocalAuthListCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *tagManagerUpdateLocalAuthListCall) WaitUntil(w <-chan time.Time) *tagManagerUpdateLocalAuthListCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *tagManagerUpdateLocalAuthListCall) After(d time.Duration) *tagManagerUpdateLocalAuthListCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *tagManagerUpdateLocalAuthListCall) Run(fn func(args mock.Arguments)) *tagManagerUpdateLocalAuthListCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *tagManagerUpdateLocalAuthListCall) Maybe() *tagManagerUpdateLocalAuthListCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *tagManagerUpdateLocalAuthListCall) TypedReturns(a error) *tagManagerUpdateLocalAuthListCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *tagManagerUpdateLocalAuthListCall) ReturnsFn(fn func(int, localauth.UpdateType, []localauth.AuthorizationData) error) *tagManagerUpdateLocalAuthListCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *tagManagerUpdateLocalAuthListCall) TypedRun(fn func(int, localauth.UpdateType, []localauth.AuthorizationData)) *tagManagerUpdateLocalAuthListCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_version := args.Int(0)
		_updateType, _ := args.Get(1).(localauth.UpdateType)
		_tags, _ := args.Get(2).([]localauth.AuthorizationData)
		fn(_version, _updateType, _tags)
	})
	return _c
}

func (_c *tagManagerUpdateLocalAuthListCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *tagManagerAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *tagManagerUpdateLocalAuthListCall) OnClearCache() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCache()
}

func (_c *tagManagerUpdateLocalAuthListCall) OnGetAuthListVersion() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersion()
}

func (_c *tagManagerUpdateLocalAuthListCall) OnGetTag(tagId string) *tagManagerGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *tagManagerUpdateLocalAuthListCall) OnGetTags() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTags()
}

func (_c *tagManagerUpdateLocalAuthListCall) OnRemoveTag(tagId string) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTag(tagId)
}

func (_c *tagManagerUpdateLocalAuthListCall) OnSetMaxTags(number int) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTags(number)
}

func (_c *tagManagerUpdateLocalAuthListCall) OnUpdateLocalAuthList(version int, updateType localauth.UpdateType, tags []localauth.AuthorizationData) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthList(version, updateType, tags)
}

func (_c *tagManagerUpdateLocalAuthListCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *tagManagerAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *tagManagerUpdateLocalAuthListCall) OnClearCacheRaw() *tagManagerClearCacheCall {
	return _c.Parent.OnClearCacheRaw()
}

func (_c *tagManagerUpdateLocalAuthListCall) OnGetAuthListVersionRaw() *tagManagerGetAuthListVersionCall {
	return _c.Parent.OnGetAuthListVersionRaw()
}

func (_c *tagManagerUpdateLocalAuthListCall) OnGetTagRaw(tagId interface{}) *tagManagerGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *tagManagerUpdateLocalAuthListCall) OnGetTagsRaw() *tagManagerGetTagsCall {
	return _c.Parent.OnGetTagsRaw()
}

func (_c *tagManagerUpdateLocalAuthListCall) OnRemoveTagRaw(tagId interface{}) *tagManagerRemoveTagCall {
	return _c.Parent.OnRemoveTagRaw(tagId)
}

func (_c *tagManagerUpdateLocalAuthListCall) OnSetMaxTagsRaw(number interface{}) *tagManagerSetMaxTagsCall {
	return _c.Parent.OnSetMaxTagsRaw(number)
}

func (_c *tagManagerUpdateLocalAuthListCall) OnUpdateLocalAuthListRaw(version interface{}, updateType interface{}, tags interface{}) *tagManagerUpdateLocalAuthListCall {
	return _c.Parent.OnUpdateLocalAuthListRaw(version, updateType, tags)
}

// cacheMock mock of Cache.
type cacheMock struct{ mock.Mock }

// NewCacheMock creates a new cacheMock.
func NewCacheMock(tb testing.TB) *cacheMock {
	tb.Helper()

	m := &cacheMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *cacheMock) AddTag(tagId string, tagInfo *types.IdTagInfo) {
	_m.Called(tagId, tagInfo)
}

func (_m *cacheMock) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *cacheAddTagCall {
	return &cacheAddTagCall{Call: _m.Mock.On("AddTag", tagId, tagInfo), Parent: _m}
}

func (_m *cacheMock) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *cacheAddTagCall {
	return &cacheAddTagCall{Call: _m.Mock.On("AddTag", tagId, tagInfo), Parent: _m}
}

type cacheAddTagCall struct {
	*mock.Call
	Parent *cacheMock
}

func (_c *cacheAddTagCall) Panic(msg string) *cacheAddTagCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *cacheAddTagCall) Once() *cacheAddTagCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *cacheAddTagCall) Twice() *cacheAddTagCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *cacheAddTagCall) Times(i int) *cacheAddTagCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *cacheAddTagCall) WaitUntil(w <-chan time.Time) *cacheAddTagCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *cacheAddTagCall) After(d time.Duration) *cacheAddTagCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *cacheAddTagCall) Run(fn func(args mock.Arguments)) *cacheAddTagCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *cacheAddTagCall) Maybe() *cacheAddTagCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *cacheAddTagCall) TypedRun(fn func(string, *types.IdTagInfo)) *cacheAddTagCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_tagId := args.String(0)
		_tagInfo, _ := args.Get(1).(*types.IdTagInfo)
		fn(_tagId, _tagInfo)
	})
	return _c
}

func (_c *cacheAddTagCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *cacheAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *cacheAddTagCall) OnGetTag(tagId string) *cacheGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *cacheAddTagCall) OnRemoveCachedTags() *cacheRemoveCachedTagsCall {
	return _c.Parent.OnRemoveCachedTags()
}

func (_c *cacheAddTagCall) OnSetMaxCachedTags(number int) *cacheSetMaxCachedTagsCall {
	return _c.Parent.OnSetMaxCachedTags(number)
}

func (_c *cacheAddTagCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *cacheAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *cacheAddTagCall) OnGetTagRaw(tagId interface{}) *cacheGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *cacheAddTagCall) OnRemoveCachedTagsRaw() *cacheRemoveCachedTagsCall {
	return _c.Parent.OnRemoveCachedTagsRaw()
}

func (_c *cacheAddTagCall) OnSetMaxCachedTagsRaw(number interface{}) *cacheSetMaxCachedTagsCall {
	return _c.Parent.OnSetMaxCachedTagsRaw(number)
}

func (_m *cacheMock) GetTag(tagId string) (*types.IdTagInfo, error) {
	_ret := _m.Called(tagId)

	if _rf, ok := _ret.Get(0).(func(string) (*types.IdTagInfo, error)); ok {
		return _rf(tagId)
	}

	_ra0, _ := _ret.Get(0).(*types.IdTagInfo)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *cacheMock) OnGetTag(tagId string) *cacheGetTagCall {
	return &cacheGetTagCall{Call: _m.Mock.On("GetTag", tagId), Parent: _m}
}

func (_m *cacheMock) OnGetTagRaw(tagId interface{}) *cacheGetTagCall {
	return &cacheGetTagCall{Call: _m.Mock.On("GetTag", tagId), Parent: _m}
}

type cacheGetTagCall struct {
	*mock.Call
	Parent *cacheMock
}

func (_c *cacheGetTagCall) Panic(msg string) *cacheGetTagCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *cacheGetTagCall) Once() *cacheGetTagCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *cacheGetTagCall) Twice() *cacheGetTagCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *cacheGetTagCall) Times(i int) *cacheGetTagCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *cacheGetTagCall) WaitUntil(w <-chan time.Time) *cacheGetTagCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *cacheGetTagCall) After(d time.Duration) *cacheGetTagCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *cacheGetTagCall) Run(fn func(args mock.Arguments)) *cacheGetTagCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *cacheGetTagCall) Maybe() *cacheGetTagCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *cacheGetTagCall) TypedReturns(a *types.IdTagInfo, b error) *cacheGetTagCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *cacheGetTagCall) ReturnsFn(fn func(string) (*types.IdTagInfo, error)) *cacheGetTagCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *cacheGetTagCall) TypedRun(fn func(string)) *cacheGetTagCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_tagId := args.String(0)
		fn(_tagId)
	})
	return _c
}

func (_c *cacheGetTagCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *cacheAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *cacheGetTagCall) OnGetTag(tagId string) *cacheGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *cacheGetTagCall) OnRemoveCachedTags() *cacheRemoveCachedTagsCall {
	return _c.Parent.OnRemoveCachedTags()
}

func (_c *cacheGetTagCall) OnSetMaxCachedTags(number int) *cacheSetMaxCachedTagsCall {
	return _c.Parent.OnSetMaxCachedTags(number)
}

func (_c *cacheGetTagCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *cacheAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *cacheGetTagCall) OnGetTagRaw(tagId interface{}) *cacheGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *cacheGetTagCall) OnRemoveCachedTagsRaw() *cacheRemoveCachedTagsCall {
	return _c.Parent.OnRemoveCachedTagsRaw()
}

func (_c *cacheGetTagCall) OnSetMaxCachedTagsRaw(number interface{}) *cacheSetMaxCachedTagsCall {
	return _c.Parent.OnSetMaxCachedTagsRaw(number)
}

func (_m *cacheMock) RemoveCachedTags() {
	_m.Called()
}

func (_m *cacheMock) OnRemoveCachedTags() *cacheRemoveCachedTagsCall {
	return &cacheRemoveCachedTagsCall{Call: _m.Mock.On("RemoveCachedTags"), Parent: _m}
}

func (_m *cacheMock) OnRemoveCachedTagsRaw() *cacheRemoveCachedTagsCall {
	return &cacheRemoveCachedTagsCall{Call: _m.Mock.On("RemoveCachedTags"), Parent: _m}
}

type cacheRemoveCachedTagsCall struct {
	*mock.Call
	Parent *cacheMock
}

func (_c *cacheRemoveCachedTagsCall) Panic(msg string) *cacheRemoveCachedTagsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *cacheRemoveCachedTagsCall) Once() *cacheRemoveCachedTagsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *cacheRemoveCachedTagsCall) Twice() *cacheRemoveCachedTagsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *cacheRemoveCachedTagsCall) Times(i int) *cacheRemoveCachedTagsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *cacheRemoveCachedTagsCall) WaitUntil(w <-chan time.Time) *cacheRemoveCachedTagsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *cacheRemoveCachedTagsCall) After(d time.Duration) *cacheRemoveCachedTagsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *cacheRemoveCachedTagsCall) Run(fn func(args mock.Arguments)) *cacheRemoveCachedTagsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *cacheRemoveCachedTagsCall) Maybe() *cacheRemoveCachedTagsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *cacheRemoveCachedTagsCall) TypedRun(fn func()) *cacheRemoveCachedTagsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *cacheRemoveCachedTagsCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *cacheAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *cacheRemoveCachedTagsCall) OnGetTag(tagId string) *cacheGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *cacheRemoveCachedTagsCall) OnRemoveCachedTags() *cacheRemoveCachedTagsCall {
	return _c.Parent.OnRemoveCachedTags()
}

func (_c *cacheRemoveCachedTagsCall) OnSetMaxCachedTags(number int) *cacheSetMaxCachedTagsCall {
	return _c.Parent.OnSetMaxCachedTags(number)
}

func (_c *cacheRemoveCachedTagsCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *cacheAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *cacheRemoveCachedTagsCall) OnGetTagRaw(tagId interface{}) *cacheGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *cacheRemoveCachedTagsCall) OnRemoveCachedTagsRaw() *cacheRemoveCachedTagsCall {
	return _c.Parent.OnRemoveCachedTagsRaw()
}

func (_c *cacheRemoveCachedTagsCall) OnSetMaxCachedTagsRaw(number interface{}) *cacheSetMaxCachedTagsCall {
	return _c.Parent.OnSetMaxCachedTagsRaw(number)
}

func (_m *cacheMock) SetMaxCachedTags(number int) {
	_m.Called(number)
}

func (_m *cacheMock) OnSetMaxCachedTags(number int) *cacheSetMaxCachedTagsCall {
	return &cacheSetMaxCachedTagsCall{Call: _m.Mock.On("SetMaxCachedTags", number), Parent: _m}
}

func (_m *cacheMock) OnSetMaxCachedTagsRaw(number interface{}) *cacheSetMaxCachedTagsCall {
	return &cacheSetMaxCachedTagsCall{Call: _m.Mock.On("SetMaxCachedTags", number), Parent: _m}
}

type cacheSetMaxCachedTagsCall struct {
	*mock.Call
	Parent *cacheMock
}

func (_c *cacheSetMaxCachedTagsCall) Panic(msg string) *cacheSetMaxCachedTagsCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *cacheSetMaxCachedTagsCall) Once() *cacheSetMaxCachedTagsCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *cacheSetMaxCachedTagsCall) Twice() *cacheSetMaxCachedTagsCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *cacheSetMaxCachedTagsCall) Times(i int) *cacheSetMaxCachedTagsCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *cacheSetMaxCachedTagsCall) WaitUntil(w <-chan time.Time) *cacheSetMaxCachedTagsCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *cacheSetMaxCachedTagsCall) After(d time.Duration) *cacheSetMaxCachedTagsCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *cacheSetMaxCachedTagsCall) Run(fn func(args mock.Arguments)) *cacheSetMaxCachedTagsCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *cacheSetMaxCachedTagsCall) Maybe() *cacheSetMaxCachedTagsCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *cacheSetMaxCachedTagsCall) TypedRun(fn func(int)) *cacheSetMaxCachedTagsCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_number := args.Int(0)
		fn(_number)
	})
	return _c
}

func (_c *cacheSetMaxCachedTagsCall) OnAddTag(tagId string, tagInfo *types.IdTagInfo) *cacheAddTagCall {
	return _c.Parent.OnAddTag(tagId, tagInfo)
}

func (_c *cacheSetMaxCachedTagsCall) OnGetTag(tagId string) *cacheGetTagCall {
	return _c.Parent.OnGetTag(tagId)
}

func (_c *cacheSetMaxCachedTagsCall) OnRemoveCachedTags() *cacheRemoveCachedTagsCall {
	return _c.Parent.OnRemoveCachedTags()
}

func (_c *cacheSetMaxCachedTagsCall) OnSetMaxCachedTags(number int) *cacheSetMaxCachedTagsCall {
	return _c.Parent.OnSetMaxCachedTags(number)
}

func (_c *cacheSetMaxCachedTagsCall) OnAddTagRaw(tagId interface{}, tagInfo interface{}) *cacheAddTagCall {
	return _c.Parent.OnAddTagRaw(tagId, tagInfo)
}

func (_c *cacheSetMaxCachedTagsCall) OnGetTagRaw(tagId interface{}) *cacheGetTagCall {
	return _c.Parent.OnGetTagRaw(tagId)
}

func (_c *cacheSetMaxCachedTagsCall) OnRemoveCachedTagsRaw() *cacheRemoveCachedTagsCall {
	return _c.Parent.OnRemoveCachedTagsRaw()
}

func (_c *cacheSetMaxCachedTagsCall) OnSetMaxCachedTagsRaw(number interface{}) *cacheSetMaxCachedTagsCall {
	return _c.Parent.OnSetMaxCachedTagsRaw(number)
}
